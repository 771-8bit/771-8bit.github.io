[{"content":"鳥人間コンテスト2023滑空機部門に出場した，東京理科大学鳥人間サークル鳥科の電装のまとめです．サークル内部の開発用資料，引き継ぎ資料でもあります．\n はじめに 東京理科大学鳥人間サークル鳥科23代電装班長のブログです．\n鳥科では電装系がロステクしていたため，今後の電装のベースとなるように必要十分な機能を癖なく普通に作るということを心がけました．\nサークル内の開発・引き継ぎ用資料でもあり，情報量が多くまとまりきっていない部分もありますが全て公開します．\n要求定義 特に滑空機では電装は無くても飛びはしますが，電装があるとちょっと嬉しいので頑張ります．\n要求は上から順に優先です．フライトデータの取得が最低なのは飛ぶことを優先するためです．\n システムの要求  パイロットの操作でラダーを制御する プラットホーム上で姿勢を確認する パイロットに対地高度・対気速度を伝達する フライトデータを取得する   電装班運営の要求  必要な技術を継承する    要件定義 共通事項 非機能要件  信頼性  故障による直接的な機能の喪失は認めるが，優先度が低いものの故障が高いものに影響を与えないような設計にする  無線通信が混信しても他に影響を与えない メイン電装のマイコンが停止しても操舵系は機能を維持する SDカードが脱落しても他の機能は動作する   ソフトウェアのバグ，コクピフレームとの接触による短絡，通信線の切断などの故障を想定する システムが複雑になるため基本的に冗長は組まず，予備部品の用意で対応する   安全性  着水時に発煙・発火しない パイロットの頭部付近に電装を配置しない   稼働時間  着水までバッテリーが持つ  電圧の監視が可能である バッテリーに最後にアクセスできるのはフライト前日の機体組立て開始時\n去年は理科大でコクピを組んだためバッテリーを入れていった     環境  機体が直射日光にあたり温度が上昇しても動作する 多少の水滴では故障せず動作し続ける (直射日光下で)LEDを見る必要なく運用できる トラックで輸送する場合，振動や熱に耐えられる 機体の金属やCFRPの粉，琵琶湖の砂の対策がされている   運用  プラットフォーム上で電装の電源を起動できる プラホ上での電装作業を最小限にする   開発環境・メンテナンス  琵琶湖で機体を組んだ状態で電装のプログラムを変更できる デバッグに必要な情報をなるべく多く出力する   拡張性  とりあえず考えない    制約条件  電気的制約  SPIは通信速度が速く，I2Cはプルアップが不安定なため基板内のみで使用 基板間の通信はUARTおよびそれに近い規格(RS422など) マイコンの動作電圧は多くのセンサーに合わせて基本3.3V   技術(力)的制約  Arduinoを使用し，自力でライブラリを書かなくて良い構成とする CANはなるべく使用せず，UARTによる文字列送受信を行う チップ部品は使用しない ケーブルの圧着はせず，既製品を使用する    操舵 そもそもワイヤーリンケージかフライバイワイヤーかはチームにノウハウがあるかで決めていいと思うので，鳥科では電装の仕事\n パイロットの操作でラダーを制御する  入力を読む  アナログ入力を読むためジョイスティックを使用する 不感帯を含む，任意のカーブを設定できる   サーボモータを動かす  十分なトルクがある  風対策   信号・電力の減衰が起きない  ケーブルが断線しない ケーブルの電圧降下が小さい テールまでの長いケーブルで問題なく信号伝達ができる       その他の要件  トラブル時ニュートラルでフライトできる(これは機構側で担保) プログラムを変更せずに琵琶湖でニュートラル調整が可能である(操舵範囲は事前調整) テールを軽くする  バッテリーはコクピに搭載 軽量なサーボを使用   機体内通信を含む，無線通信で操舵を行ってはならない(大会ルール)    テレメトリ  プラホからの発進時に姿勢などを確認できるようにする  以下のデータをダウンリンクする  ロール・ピッチ 対気速度   受信機はポケットに入る程度のサイズにする  PC・タブレットは大きくてプラットホームで扱いづらい(特に雨天時)     デバッグのため，全センサーデータをダウンリンクする  高度速度計 これホントに役に立つの？という話はありますが，テレビのネタになるという大きなメリットがあります．\n パイロットに対地高度・対気速度を伝達する  対地高度を推定する  測定精度は0.1m単位を要求 技術的な制約  高高度では気圧高度を，低高度では超音波高度を信用すべき  気圧高度は湖面からの絶対高度は分からない 超音波は(ほとんどのセンサーで)高高度からでは届かない   気圧センサ  動圧・ハッチの衝撃によるセンサーの外れ値を弾く 中央値を取るために違う場所に3つの気圧センサを配置する   超音波センサ  水面付近は気圧高度より信用できる       対気速度を測定する  記録方法は後述   パイロットに情報を伝達する  視覚は前方に集中するのでモニター等は使えない(テープLEDはアリかも) 触覚は操縦に影響するので使えない 使えるのは聴覚のみ     その他の要件  フェールセーフ  センサーデータが取得できない場合，異常だと検知した場合は読み上げを行わない      ロガー  下記のデータを記録する     優先度 測定値 備考     高 GPS ある程度信頼できるため冗長の必要はない   高 超音波高度 超音波が干渉するため一つだけ搭載する   高 気圧高度 高度計の信頼性を確保できる分だけ搭載する   中 ラダー操作量 ラダー操作に影響を与えないように   中 9軸・姿勢 複数搭載なら異種のセンサーを搭載する   中 対気速度 様々な測定方法があるので後述   低 AoA(Angle of Attack)・迎え角 水面付近は上下方向の風は基本なく，ピッチの測定で十分   低 AoS(Angle of Slip)・滑り角 代替手段がなく，AoAと同じく製作が高難度で今回は見送り     データを同期した状態で記録する 着水時にデータをロストしない 大型の滑空機で急速な動きはしないことを念頭に置いてデータレートを決定する  無人機・ロケット界隈のアビオ屋の感覚よりはデータレートは下げても良い(10～20Hz程度) 要求に完全に合わせるよりもマイコンのスペックで実現可能なものを実装する流れになるので定量的な要求は出さない    スケジュール gantt dateFormat YYYY-MM-DD axisFormat %m todayMarker off excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section システム設計 要求定義 :req_def , 2022-10-17,2022-10-27 要求分析 :req_analysis , after req_def , 7d 基本設計 :Functional_design , after req_analysis , 7d 詳細設計 :physical_design , after Functional_design , 2022-11-29 section 電装全体 BBM統合 :milestone , 2023-02-21,1d 基板設計 : pcb, 2023-02-03,2023-03-01 FM基板実装 :milestone , 2023-03-06,1d ケーブル製作 : cable, 2023-05-10,2023-05-19 予備基板実装 : cable, 2023-07-24,2023-07-28 section 電装班外と調整 基板搭載場所仮決定 : kiban, 2022-11-20,1d 基板搭載場所確定(ピトー管以外) : kiban, 2023-02-02,1d ピトー管場所確定 : pitot, 2023-02-17,1d ピトー管固定方法確定 :pitot , 2023-03-21,1d コクピ上部電装固定 :kotei , 2023-04-28,2023-05-10 ジョイスティック固定 :stick , 2023-07-14,1d 超音波センサ用カウル穴あけ :hole , 2023-07-21,1d section メインマイコン 構成部品候補の調査 :research , 2022-10-17,2022-11-01 音声合成ICハードウェア :callout_integrate , 2022-12-01 , 2022-12-15 内蔵センサー値取得 :sense ,2023-01-10 , 2023-01-17 SD記録 :sd , 2023-01-17 , 2023-01-24 スケジューリング :sche , 2023-01-24 , 2023-01-31 操舵量取得 :ctrl , 2023-01-31 ,2023-02-06 SD高速化 :sd_fast ,2023-03-06 ,2023-03-09 合成音声仕様決定 :callout_spec , 2023-04-07 , 2023-04-14 音声合成ICコマンド解析 :callout, 2023-04-14,2023-04-31 スピーカーアンプ動作確認 :speaker_amp, 2023-05-12, 2023-05-15 音声合成関連データ処理 :alt , 2023-05-11 , 2023-07-28 SDデバッグ : sd, 2023-05-18,2023-06-01 SDスプーリング用マイコン追加 : sd, 2023-06-02,2023-06-17 修正基板設計 : pcb, 2023-06-03,2023-06-07 修正基板実装 : pcb, 2023-06-14,2023-06-16 section 操舵系 ICSサーボ引き継ぎ :ICS , 2022-12-02 , 1d BBM完成 :milestone , 2022-12-09 ジョイスティック選定 :stick , 2023-01-31 , 2023-02-06 サーボケーブル製作 :cable , 2023-06-08 , 2023-06-09 テール桁サーボ固定 :servo , 2023-06-28 , 1d section 電源部 電気的仕様決定 :power , 2023-04-07 , 2023-04-14 外装設計・製作 :case , 2023-04-14 , 2023-04-28 ケーブルの取り付け方向を変え再製作 :cable , 2023-06-12 , 2023-06-14 section 機体下電装部 超音波センサ選定 :sonic , 2022-11-29 , 2022-12-02 BBM完成 :milestone , 2022-12-15 プログラム : pitot,2023-04-28,2023-05-19 section エアデータ電装部 プログラム : pitot,2023-04-14,2023-05-19 固定用フランジ製作 : pitot,2023-05-17,2023-05-24 AB翼内ケーブルコネクタはんだ付け : connector,2023-05-25,1d 基板故障 : milestone,2023-06-04,1d デバッグ・基板再製作 : pitot,2023-06-05,2023-06-14 先端部・カバー製作 : pitot,2023-07-03,2023-07-14 section カメラ カメラ選定 :camera , 2023-02-04 , 1d カメラ非搭載判断(画質不足) :camera , 2023-06-14 , 1d section テレメトリ 仕様決定 :tele_need , 2023-03-09 , 2023-03-11 乗り込み練用送受信機製作 :air_hard , after tele_need , 2023-03-16 無線ハブ基板設計 :radio_design , 2023-04-07 , 2023-04-14 無線ハブ基板実装 :radio_impl , 2023-04-21 , 2023-04-28 プログラム :radio_program , 2023-04-14 , 2023-05-12 全データダウンリンク :radio_all , 2023-05-22 , 2023-05-26 テレメトリ受信機基板設計 : radio_design , 2023-06-02 , 2023-06-06 基板実装 : pcb, 2023-06-14,2023-06-16 section テスト 水没試験 :water , 2023-02-22 , 1d ロングラン試験(全組中) :longrun , 2023-06-11 , 1d 温度環境試験(TF) :sunlight , 2023-07-07 , 1d End-to-End試験 :e2e , 2023-07-28 , 1d section 鳥科全体 桁試験 : milestone, 2022-12-27,1d 新歓 : milestone, 2023-04-06,1d 初全組 : milestone, 2023-06-04,1d 初TF : milestone, 2023-06-17,1d 鳥コン : milestone, 2023-07-30,1d section 班長の都合 ロケット打上げ :rocket_voilet, 2022-11-11,2022-11-13 中間試験 :mid, 2022-11-08,2022-11-16 ロケット審査書 :rocket_happa , 2022-12-30,2023-01-27 期末試験 :last , 2023-01-17,2023-01-25 インターン :AE , 2023-03-20,2023-04-05 インターン :AE2 , 2023-06-01,2023-06-23   (function () { if (window.isMermaidLoaded) return; window.isMermaidLoaded = true; const script = document.createElement('script'); script.src = 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js'; script.onload = () = { mermaid.initialize({ startOnLoad: true }); }; document.body.appendChild(script); })();   BBM : ブレッドボードモデル，試作\n EM : エンジニアリングモデル，FM同等品なのでPM(プロトタイプモデル)寄りかも\n(23代電装では省略したが，結果的にはFMを作り直したので一回目のFMがEM扱い)\n FM : フライトモデル，本番用\n  基本設計 全体像  初期案からの変更点（独立したエアデータ電装部の構成は参考）\n テレメトリのためTWELITEを追加 カメラを廃止 SDカードをDue直結ではなくスプーリング用のXIAO経由に変更（詳細）  GPSとTWELITEをセットにした基板を製作済みだったので，操舵角計測でRXを使っているポートのTXをSD用に使用し，これらのポートは115200bpsにした． RX側はGPSが460800bpsまでで操舵角が115200bps(頑張れば変更可)，TX側はTWELITEが230400bpsまでで，SDにはなるべく早いボーレートを使いたい．このため本来はGPSとSD，操舵角とTWELITEの組み合わせが良い． エアデータ電装部・機体下電装部はSD書き込み以外のタスクもあるため460800bpsにしたが，SD書き込みのみは115200bpsで足りた．    癖のある設計はしてないつもりなので，要求から設計への落とし込みの根拠について特記事項のみ↓\n 各コンポートの必要性  機体下：超音波センサを機体下部に搭載する必要 エアデータ：センサーを機体外部に搭載する必要 ジョイスティック：アナログジョイスティックのすぐ近くに配置する必要 電源部：防水が必要な区画を最小限にするため独立 スピーカー：聞きやすい位置に配置するため独立 ラダー：垂直尾翼の機構にサーボのみ配置 無線ハブ：Arduino Dueのシールドのフットプリントに入らなかったので独立 メイン：スペース的にどのコンポーネントにも統合できないので独立   メインマイコンはArduino Due一択  マイコンの駆動電圧は3.3V（センサーの制約） UARTがたくさんほしい 有名なArduino互換ボードでこれらを満たすのはDueのみ 選定時点でRaspberry Pi Picoはわりと新製品でDueしかなかった   他のマイコンは小さいのでSeeed Studio XIAO ラダーのサーボモーターは鳥科で代々使ってる近藤科学のKRS-4034HV ICS  トルクについて定量的な要求を出すのは難しいが，前年これで不足しなかった 前年と同じアルミのサーボホーンが使えるため機構の設計が楽 テールヘビーを避けるため軽量なものが良い ケーブルが長くなるのでPWMではなくシリアル通信が良い （まず無いけど）水平尾翼を電装制御したくなった場合でも，複数のサーボをデイジーチェーン接続できるので電装の設計変更が少ない   ジョイスティック電装部と機体下電装部は搭載位置が近くても統合しない  操舵系はクリティカルなため余計な機能を混ぜない   エアデータ電装部は有線接続（電源通信両方）  メイン電装と独立させると楽だけど，  パイロットにリアルタイムで対気速度を繋げたい 他と同期してデータを取りたい(GPS時刻を使うのもアリ)   TWELITEはスループット，レイテンシともに不足 電装班の技術力的に通信は有線の方が安心\n（Bluetooth/WiFiは経験が無かったから避けた） 電源は独立でも良いが，通信は有線なのでまとめて有線   姿勢取得のためにカメラを搭載  センサーデータを使うよりカメラ映像の方が確実\nカメラから翼の上下がほとんど見えなかったので削除   電源設計  サーボモータ用に3セルのLiPoバッテリーを搭載 火災防止のためサーボに過電流保護を挟んで供給，逆接保護は省略 電源はサーボ用のLiPoバッテリーのみで，ロガー系もこれから供給する  それぞれのマイコンには独立した過電流保護を挟んで供給する ロガー系からの波及故障のリスクよりも，電源を分散させる手間の方が大きいと判断 舵角計測のため操舵系の信号線がロガー系に繋がっているため，電源を完全に分離してまで波及故障を防ぐのは意味がない 電源を分散させると，各機器の起動タイミングによる問題・各バッテリーの残量管理の手間・電源投入の手間が増える     姿勢モニタの受信側のデバイスはスマホのシリアルモニタ  液晶・7segを使うのは技術的にダルい スマホアプリの開発は面倒だけど，シリアルモニタならアプリがあるから楽    物理的な配置   メイン電装部には電装ハッチを用意 ジョイスティック電装部はパイロットが操作しやすい位置に 機体下電装部は超音波センサを湖面に垂直に向けることができれば場所は任意 スピーカー部は場所は任意(音が聞こえるならメイン電装部に統合も可) エアデータ電装部はコクピ上  設計陣との調整で翼から生やすことになった 三面図提出時点で左翼に配置で確定 重量バランスはダミーウェイトで調整する(同じものを2つ作るのは非常に難易度が高く，UARTのポートも空いてない)    質量概算    コンポーネント 寸法[mm] 質量[g] memo     メイン電装部 100×150×70 300~600 Lipoが60g，Dueが60g，防水をちゃんとやると+300g   カメラ 81x65x78 200 防水ハウジング含む   カメラ 48x50x53 85 本体が防水   エアデータ電装部 あざみ野ぐらい 40 ピトー管含めた電装部品のみの質量，AoA・AoS無し   機体下部電装部 50mm四方の基板一枚 20 ロケットのノーズが20g   ジョイスティック電装部 50mm四方の基板一枚+ジョイスティック 30 ジョイスティックのサイズに依存   ラダー部 43×32×33 60 サーボモータのみ   スピーカー部 直径50ぐらい 50 音量を求めると重くなるかも    詳細設計・製作 電装は作ってみないと設計が固まらないので詳細設計と製作はほぼ同じ．\nとにかく要求を満たすものを作れれば良いので，手を動かしていろいろ試しつつ，設計の根拠はしっかり記録に残す．\n全体 UARTフォーマット 桁が固定されていない小数をカンマ区切りで送信し，改行コードLF(\\n)をつける． ボーレートは115200bpsとする． 通信速度が足りなかったので460800bps．\n機体下電装部-\u0026gt;メイン電装部\n気圧[hPa],温度[deg],気圧高度[m],超音波高度[m]\nエアデータ電装部-\u0026gt;メイン電装部\n気圧[hPa],温度[deg],気圧高度[m],差圧[Pa],対気速度[m/ss]\nメインマイコンからは，SD用マイコン・機体下電装部・エアデータ電装部のmicro SDに保存する文字列を直接送信する．\nSD用マイコンはデータを受信するだけで，舵角計測でRXを使っているUARTポートのTXを使うので115200bps．\nコネクタ・ケーブル  すべて手で圧着はせず，コネクタ付きのケーブルやアッセンブリワイヤーなどを使用する． ケーブル同士の接続には基本的には半田スリーブを使用する．ただし芯線が細かったりヒートガンが使えない場所では，普通にはんだ付けして熱収縮チューブで保護する．\nフラックスを使っても半田が芯線にのらなかったので(特に細いケーブル)，半田付けは手で行うことにした．ただし，細いケーブルでも被膜にスリーブを固定できるのでホットメルト接着剤リングは有用だった．半田付けは手で行った上で半田スリーブを熱収縮チューブとして使用する．  半田スリーブ(白)  AWG26-24用らしいけど22までは使える   コネクタ選定\nどれも意外と挿抜回数は少ないので注意．  汎用：JST-XHコネクタ  2,3,4,5ピンの在庫がある PAコネクタのほうが抜き挿ししやすいけど入手性が悪い 半田スリーブを使うと2.0mmピッチは狭い，XHは2.5mmピッチ XHアッセンブリワイヤー   中継：JST-SMコネクタ  中継用ならこれ TORICA-UARTの中継  SMケーブル  シールドふくめて5Pを使用 ピトー管用だとHR30も良さそうだけどアッセンブリワイヤーが売ってない     サーボの中継  SMケーブル  シールドふくめて4Pを使用 最大電流3Aで，他のいい感じの中継コネクタもないからこれで       サーボの差し込み部分のコネクタ  サーボ専用の端子はアッセンブリワイヤーがないから使わない サーボに付属する専用のケーブルを切って半田付けして接続する     ピン配置\n短絡などの事故を防ぐため，電源とGNDは常に同じ位置に配置する．  4P TORICA-UART  1 黒 GND シールド 2 赤 5V 3 緑 Due TX - XIAO RX DTXR 4 白 Due RX - XIAO TX DRXT   5P ICS-UART  1 黒 GND 2 赤 5V 3 緑 ICS TX - XIAO RX ITXR 4 白 ICS RX - XIAO TX IRXT 5 青 EN   4P JOYSTICK  1 黒 GND 2 赤 3.3V 3 緑 X 4 白 Y   4P サーボ  黒 GND 赤 LiPo VCC 白 ICS 青 シールド     ケーブル  シールドの扱い  すべて静電シールドなので，電源に近い方側でシールドをGNDに接続する サーボケーブルも近くに他の信号線はないので，ノイズを漏らさない電磁シールドケーブルではなく周囲からのノイズを防ぐ静電シールドケーブル   サーボ・電源用ケーブル  FA用300V電源・低速移動屈曲配線ケーブルシールド有  3芯・シールドあり・AWG22(QIコネクタ,2550コネクタの最大)・3m以上   坂東電線 軟質マイクコード スーパーフレックス VSVC 3芯  3Aが流せるなかで一番細いAWG24に変更     その他信号用ケーブル  シールド付きスリムロボットケーブル ↑とモノタロウでまとめて買ってもいいけど千石でも売ってる      ブートローダー小噺 Arduinoにはブートローダーというものがある．他にも役割があるが，PCと通信を行いフラッシュメモリにプログラムを書き込む役割を持つ．\n Arduino Due  ブートローダーはチップ内蔵のROMに書かれていて，フラッシュメモリが消去されるとプログラムを書き込めるようになる．ROMなので破壊はされない． メインのマイコンがAT91SAM3X8Eで，Programming Portからの書き込みを担当するATmega16U2はAT91SAM3X8EのEraseピンとハードウェアで接続されているため，AT91SAM3X8Eがクラッシュしていてもフラッシュメモリを消去して書き込みを行うことができる． Programing PortはAT91SAM3X8EのUART0を使用するため，これとは別にNative Portからの書き込み方法も用意されている．これはAT91SAM3X8EのUSBポートを使用したものでソフトウェア的にフラッシュメモリを消去して書き込みを行う．AT91SAM3X8EがクラッシュしているとNative Portからの書き込みはできない．   Seeed Studio XIAO RP2040  RP2040のバイナリ書き込みはチップ内のROMに書かれていて，BOOTボタンを押して接続してuf2ファイルをアップロードする方式の書き込みを担う． arduino-picoを使用してBOOTボタンを押さずにArduino IDEからアップロードする方式に対応するブートローダーはチップ外付けのフラッシュに書き込まれ，これは破壊されうるがBOOTボタンを押した書き込みで復活できる．   Seeed Studio XIAO SAMD21  チップはSAMD21G18で，このフラッシュメモリにブートローダーが書かれている．USBからの書き込みはこれが壊れると他に手段はなくなる．ブートローダーの書き込み時にここを書き込み禁止に設定できるが，工場出荷時はこの設定がされていないらしい．    配列外参照をしたり割り込み関連で事故ったりするとブートローダーを含むフラッシュのプログラムが壊れるリスクがあり，XIAO SAMD21の場合はこれが回復不能なダメージとなる．\n復活させる方法もあるが，かなり面倒なので同じフォームファクタのXIAO RP2040を使うことにした．\n (参考)メモリの種類  ROM(Read Only Memory)  工場で書き込まれた後，ユーザーは書き換えられないメモリ パソコンで例えるとBIOSあたり   RAM(Random Access Memory)  マイコンが動作するために必要なメモリ パソコンで例えると16GBとかのメモリ   フラッシュメモリ  プログラムを書き込むためのメモリ パソコンで例えるとSSDとか      コンポーネントごと 電源部  サーボの過電流保護  リセッタブルヒューズを挟む  【ポリスイッチとは】ヒューズとの違いは？  普通のヒューズは交換が面倒   トリップ電流(遮断しうる最小電流)：6.0A \u0026gt; サーボの最大消費電流 遮断電流(瞬時に遮断する電流)：40A 保持電流(遮断後に流れ続ける電流)：3.0A 温度上昇でディレーティングしても(保持1.56A/トリップ3.12A@85℃)なのでセーフ   サーボの最大消費電流は3.1A   電源スイッチ  サーボ無しでも200mA程度消費するので，なんらかの電源スイッチは必要 サーボの最大負荷を想定し，12V5A定常的に流せる回路を作る 半導体スイッチを使うフライトピンは電気的に複雑になので不採用（参考） 電源スイッチはレバーロック式のトグルスイッチを使う   電圧電流計  バッテリーの電圧監視のために電圧計DE-2645-02をつける 短絡，モータの過負荷が分かるように電流も測定できるものを選定   電源BOX  バッテリー本体とヒューズのみを防水し，他は面倒なので対策しない（SDカードもOK） 防水にはロック付きのタッパーを使う  透明なのは必須   搭載するバッテリーはKypom K6 11.1V 2200mAh 35C70C  Eclatと同じ\n軽量化のためKypom K6 11.1V 850mAh 35C70Cを搭載   以下のケーブルをケーブルグランドを使って出す\n（どちらも同じ量の電流が流れる）  メイン電装に供給する電源ケーブル 電源スイッチにつなぐケーブル   ケーブルグランドPG7  選定は適合ケーブル径だけ見れば基本OK  防水等級はIPX7で良い．IPX8はいらない．   これの取付穴径(ドリルで開ける穴)は12.7mm ケーブルグランドつけてもコネクタのせいで結局取り外しはできないので，シーリング材で固定しても良い 今回は鳥科に在庫あって見た目もいいから採用 ケーブルの長さの調整ができるのがややメリット？\n       マイコンへの電源供給  それぞれにM78AR05-0.5を使用 過電流保護を搭載(入力側にスパイクがないことを確認済み・自動復帰あり) 電源に近い部分に過電流保護を持たせるため，DCDCはメイン基板に搭載し5Vをケーブルで配電する 基本的にDCDCはM78ARシリーズがおすすめ (出力側からの逆流対策が甘いので改善が必要)   コンデンサ配置  Arduino Dueの回路図参考  VINに47uFついてる． DCDCで5Vに落とす．VIN側に10uF，5.5V側に47uFついてる． 5Vからレギュレータで3.3Vに落とす．3.3V側に10uFついてる．   GPSとスピーカーの消費電流が大きいので，5Vラインにコンデンサを外付けする． XIAOが載った基板にはコンデンサを外付けする．    メイン電装部 ハードウェア  --    部品 個数 価格     Arduino Due 1 6,920   Seeeduino XIAO RP2040 1 830   マイクロSDカードスロットDIP化キット 1 300   9軸センサ BNO055 1 2,450   気圧センサ DPS310 1 1,408   GPS(GT-902PMGG) 1 2,480   M78AR05-0.5 3 480   整流ダイオード1N4007-B 4 100   音声合成LSI ATP3012F6-PU 1 1,100   セラミック発振子 CSTLS16M0X53-B0 1 35   TWELITE RED DIP 1 3,030   アンテナ TWE-AN-D85 1 550   アンテナケーブル 1 550   抵抗内蔵5mm青色LED 1 200   トグルスイッチ 1回路2接点 1 90   トグルスイッチ 2回路2接点 1 100     気圧センサ  調べた限り気圧センサはDPS310が一番高精度    DPS310精度やばすぎて草\nこれが静電容量式気圧センサの力か… pic.twitter.com/TUkWzHqA4O\n\u0026mdash; だん (@kogakudanshi) June 19, 2022  --   9軸センサ\n 姿勢計算までやってくれるのでBNO055を使う 加速度角速度磁気だけの場合はマイコン側でカルマンフィルタなりMadgwickフィルタなりを回す必要がある    GPS\n GPSはu-bloxが一番信頼できる GPSは受信RXだけ，TWELITEは送信TXだけのため，1つのUARTポートで処理を行える\n    micro SD\n ピン配置    音声合成用スピーカー\n アンプつきスピーカー候補(可変抵抗による音量調整機能付き)  Adafruit(あざみ野2022) Seeed Studio   結局音量が足りなかったのでアンプとスピーカーをバラで購入  PAM8012使用2ワットD級アンプモジュール 電源と信号いれてスピーカーに繋げるだけ スピーカーユニット 5cm 8Ω0.5W ネジ穴があり結束バンド固定が可能      TWELITE\n TWELITEはREDの方が出力が高い アンテナはダイポールなので縦向きに設置する TWELITEは事前に設定が必要 チャンネルは干渉対策のためデフォルトからずらすと良い    スイッチ\n サーボの通信線と計測用のArduino Dueの間の接続をトラブル時に切れるようにトグルスイッチを使用する Programming Portとエアデータ電装部の通信を切れるようにトグルスイッチを使用する 万一パイロットが接触しても問題ないよう，トグルスイッチは機体後方に倒れる向きが通常となるようにする    ソフトウェア SDカードの書き込みに時間がかかり，ダブルバッファを使って書き込むデータを管理してSD書き込み以外を割り込みで処理しようとしたが，起動から数分後にマイコンがハングアップする問題が解決できなかった．SDアクセス中もUART受信割り込みなどは動作しているはずで，SDカードアクセスに使用する割り込みとタイマ割り込みの優先度の問題やリソースの競合が原因と考えているが，ダブルバッファの実装が原因の可能性も否定はできず，デバッグに時間がかかりそうだったのでハードウェアの仕様変更により解決した．\n [廃止]タイマ割り込みを使ったスケジューリング  用意するタイマ割り込み  100Hz 200Hz   I2Cセンサーの計測  I2C接続のセンサーとの通信は一連の送受信が高速に行われるためプリエンプションを認めない． プリエンプションを認めないため，優先度の高いタイマ割り込みで処理を行う． ISRの起動周期は100Hzとする．  BNO055は通信時にデータを計測し，100Hzで取れる． DPS310は32Hzでデータを計測し，ISRで最新値を取得する．   I2Cの速度はBNO055の最大の400kHzとする(DPS310はMHzクラス)．   UART送信  機体下部電装部・エアデータ電装部のmicro SD記録用のデータ送信はISRに合わせて100Hzで行う．   UART接続のGPS・マイコン(機体下電装部・エアデータ電装部・ジョイスティック電装部)の受信  UART受信データはマイコン内のバッファに貯まるため，プリエンプション(中断)されることを認める． I2Cセンサーの処理を優先させるため，そのISRより高い優先度にはしない． ISRの起動周期は500Hz200Hzとする．500200の根拠は最大250の2倍(サンプリング定理の気持ち)．ペリフェラルにはアクセスせずマイコン内の処理で完結するので500Hzの高速起動で問題ない(と思っていたが，micro SDへの書き込み量が増えるためデータ量は落とさないとダメだった)．  UARTの受信周期は以下の通り  ICS 250Hz 100Hz エアデータ電装部 100Hz 32Hz 機体下部電装部 100Hz 32Hz GPS 10Hz       SDへの書き込み  SDカードへのアクセスは時間がかかるため，SPIをSDカード専用バスとする． SDカードへのアクセスはプリエンプションを認める． 優先度が低いためメインループで処理を行う．   TWELITEでのダウンリンク  14Hzでダウンリンクを行う．（体感で読みやすい速度に調整）  頻度が低いのでloop内でmillis()を使ってタイミングを管理して4Hzで実行する． 1 2 3 4 5 6  uint32_t now_time = millis(); static uint32_t last_time = 0; if (now_time - last_time \u0026gt;= FUNCTION_PERIOD) { last_time = now_time; some_function(); }      割り込み含めてを全ての初期設定を終えたあと全データを一度だけダウンリンクする．  ただしGPSはロックまで時間がかかるのでダウンリンクしない． 大量のデータを一度に送信するとマイコン側の処理が詰まるのである程度時間を分けてダウンリンクする必要がある．     音声合成IC  秋月商品ページ 音声合成ICとの通信はプリエンプションしても問題ないが，プリエンプションを認めないI2Cセンサーと独立させるためにI2C1に接続する． 通信で厳密なリアルタイム性を求めないことは音声合成ICのタイミングチャートで確認した． 優先度が低いためメインループで処理を行う． I2C関連  I2C概要 ArduinoでI2C I2Cの速度はICの最大の400kHzとする．  I2C高速化            タスク名 起動周期 優先度 中断 概要     ISR_100Hz() 100Hz 14 禁止 メインマイコン内のセンサーデータ取得，機体下部電装部・エアデータ電装部・GPSからのデータ受信，機体下部電装部・エアデータ電装部へのSD保存文字列送信   ISR_200Hz() 200Hz 15 許可 ジョイスティック電装部からのデータ受信   main_SD.flash() \u0026mdash; loop() 許可 SDカードへの書き込み   TWE_downlink() 4Hz loop() 許可 TWELITEへのダウンリンク   callout_altitude() TBD loop() 許可 高度の読み上げ     タイマ割り込み詳細  優先度含めた割り込みの設定，タイマ以外のセンサーなどの初期設定を全て終えてから割り込みをスタートさせる． タイマ割り込みにはDueTimerを使用した上で優先度を設定する．優先度は0(最高)～15(最低)で表される． TC1ブロックに含まれるTimer3をISR_100Hzに，Timer4をISR_200Hzに割り当てる．   DUEでは標準ではTC1のブロックは使用していないらしい 参照\n  SysTick(delay()やmillis()に利用)の優先度(デフォルト15)の優先度をタイマ割り込みより高くする． ISR_100Hz()のTimer3の優先度を，ISR_200Hz()のTimer4の優先度より高くする． UARTの処理をISRで行うため，タイマの優先度をUART受信割り込み(優先度不明)より低くする．とりあえずめっちゃ低く． 優先度はNVIC_SetPriority()により設定する．TC3_IRQnはTC3のことではなく，Timer3のことである．参照  1 2 3 4 5  Timer3.attachInterrupt(ISR_100Hz).start(10000); Timer4.attachInterrupt(ISR_200Hz).start(5000); NVIC_SetPriority((IRQn_Type)SysTick_IRQn, 13); NVIC_SetPriority((IRQn_Type)TC3_IRQn, 14); NVIC_SetPriority((IRQn_Type)TC4_IRQn, 15);    DueTimer 割り込みの優先度詳解 データシート該当部 Seeed Studio XIAO SAMD21もArduino Dueと同じARMアーキテクチャを採用したAtmel社のSAMシリーズのマイコンで，割り込みの設定はほぼ同じ．割り込みを管理するNVICはARMアーキテクチャに含まれるもので，ここで優先度を設定する．ただし割り込みの優先度の深さはXIAOの場合は4まで．     SDアクセスのスプーリング用にXIAO RP2040を追加して，エアデータ電装部・機体下電装部へと同様にUARTで保存する文字列を送信する仕様にした．\n通常マルチタスクを行う場合，割り込みを用いて実行中のタスク切り替えて複数の処理を実行する．割り込みを使う場合，基本的には頻度の高いタスクに高い優先度を割り当てれば良く，レートモノトニックスケジューリングとなる．デッドラインが早い順に高い優先度を割り当てるEarliest Deadline First方式もあるが，この規模ではレートモノトニックスケジューリングの方がシンプルで制御しやすい．素のArduinoで限界の場合はFreeRTOSなどのRTOSを使うのも良いかもしれない．\n今回はSDカードアクセス中にタイマ割り込みを使用したときマイコンがハングアップする問題が解決できなかった．このため割り込み無しのノンプリエンプティブマルチタスクを行った．ノンプリエンプティブマルチタスクではCPUを独占しないように各タスクの実行時間を最小限にしてタスクを早い周期で順番に実行することが必要である．当然だがdelay()を使わずにmillis()などの時間関数でスケジューリングを行う．UARTの送信は複数回に分けることで実行時間を短く分割できたが，SDカードアクセスには時間がかかり解決できなかったため，ハードウェアを変更した．\n 基本的には100Hzで各処理を行い，独自のスケジューリングが必要なものはloop()から直接呼び出す．行儀は悪いが，data_マイコン名_センサー名_データ種類_単位と命名規則は統一したうえでグローバル変数に格納する．\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  void loop() { uint32_t ISR_now_time = millis(); static uint32_t ISR_last_time = 0; if (ISR_now_time - ISR_last_time \u0026gt;= 10) { ISR_last_time = millis(); func_100Hz(); } // 合成音声読み上げ  callout_status(); // テレメトリダウンリンク(タイミングも関数内調整)  TWE_downlink(); } void func_100Hz() { // GPS・操舵角・機体下電装部・エアデータ電装部読み取り  polling_UART(); // フライトフェーズ判断(メインの加速度も測定)  determine_flight_phase(); // 気圧センサ×3・超音波センサから高度推定  calculate_altitude(); // SDに記録(メインの気圧高度も測定)  send_SD(); }     BNO055詳細read_main_bno()\n 秋月商品ページ チップデータシート Arduinoライブラリ    DPS310詳細read_main_dps()\n Arduinoライブラリ データシート  データレートとオーバーサンプリングの設定は以下の通り ここらへんを参考に，データレートと精度のちょうど良いバランスを決めた． 気圧と温度のデータレートは同じがいいらしい 温度は気圧に比べればそこまでの精度はいらない  1 2  dps.configurePressure(DPS310_32HZ, DPS310_16SAMPLES); dps.configureTemperature(DPS310_32HZ, DPS310_2SAMPLES);    気圧計算    UART受信polling_UART()\n UARTは全てpolling_UART()で読み出す． loop()で高速でポーリングするよりfunc_100Hz()内で10ms単位でまとめて読みだした方がスループットが高い．レイテンシは十分確保できる． 操舵角度計測  TORICA_ICSのics.read_Angle()でサーボモーターへの指令値を取得する． コマンドヘッダを検知し，ポジションデータの上位7ビットと下位7ビットを結合して指令値を計測する．（参考） サーボとの通信は100Hz以上の頻度で行われるため，read_Angle()はUART受信バッファを全て読み出すまで繰り返して最新値を返すようになっている．   機体下電装部・エアデータ電装部  TORICA_UARTのUART_read()で受信した値を取得する． TORICA_UARTの使い方はREADME参照．内部実装は以下を参照．  UART区切り  UART区切り1 UART区切り2   UART抽象化   死活監視はここで行う．   GPS  秋月商品ページ u-center  通信速度を115200bpsに データレートを10Hzに 時刻緯度経度高度が含まれるセンテンス(GGA)のみ出力   コンフィグ保持 GPSのQ\u0026amp;A u-center NMEAセンテンス選択 Arduinoライブラリ      SD記録send_SD()\n  データ種類に応じて10~100Hzで記録しようと考えていたが，100Hzでの記録は間に合わなかったので全てまとめて20Hzで記録する仕様にした．\n [廃止]種類別  TYPE,経過時間[ms],値,値,… GPS,経過時間[ms],hh,mm,ss.f,緯度[udeg],経度[udeg],アンテナ海抜高度[m] PRESSURE,経過時間[ms],気圧[hPa],温度[deg],気圧高度[m] IMU,経過時間[ms],X[m/ss],Y[m/ss],Z[m/ss],qW,qX,qY,qZ RUDDER,経過時間[ms],角度 UNDER,経過時間[ms],気圧[hPa],温度[deg],気圧高度[m],超音波高度[m] AIR,経過時間[ms],気圧[hPa],温度[deg],気圧高度[m],差圧[Pa],対気速度[m/ss]     20Hzで全データをするため，100Hzで実行されるsend_SD()の中で記録データを5回に分けてUARTに流す．\n  保存する桁数に注意してフォーマット指定子を記述する．\n 必要な精度で記録されるように小数点以下の桁数を設定． GPS測位の有無に関わらずデータ量が変わらないようにリーディングゼロを設定．      テレメトリダウンリンクTWE_downlink()\n 4秒に1回全データをダウンリンクする． TWELITEは一度に大量のデータを送信できないため，5回に分けてデータを送信する． 機体下電装部・エアデータ電装部は接続が途絶えても最後の値が残り続けるため，直近1秒でデータが受信できているかという死活監視の結果もダウンリンクする．    対地高度・対気速度読み上げ\n フライトフェーズ判断determine_flight_phase()\n以下のフェーズを判定する．          PLATFORM プラホ上   TAKEOFF 発進中(超音波が測定範囲外or気圧高度の変化を検知)   HIGH_LEVEL 水平飛行(離陸から3秒たったとき)   MID_LEVEL 超音波センサの測定レンジ内(5m以下になったとき)   LOW_LEVEL 1m以下，速度と高度を交互に読み上げ     高度推定calculate_altitude()\nGNSSは信用できず，気圧は対地高度を直接測ることはできず，超音波は高い所では測定範囲外になる．高いところでは気圧高度を，低いところでは超音波高度を使うことで解決できそうだが，超音波高度にノイズがある(後にセンサーの故障と判明)ため単純に切り替えるだけではうまくいかなかったので以下のように実装した．\n 3つの気圧センサーの中央値をとり，気圧高度を取得する． MID_LEVEL以下のフェーズで，気圧高度と超音波高度のオフセットを計算し，気圧高度から引いて対地高度を計算する． オフセットについて4秒間の中央値を計算することで，超音波センサのノイズの影響を無くす． 超音波による補正は3秒かけて段階的に開始する．   合成音声読み上げcallout_status()  基本的にピトー管の対気速度を読み上げる． 対地高度が1m下がるごとに，「コウド,ロクテンゼロ」などと読み上げる． 対地高度が1mを切ると対気速度と対地高度を交互に読み上げる．   HILS（Hardware In the Loop Simulator）\n実際の高度や速度を与えて電装の動作確認をすることはできない．\nテストなしでコードを書くのは無理があり，テスト用のハードウェアを雑でいいので用意する．  HILSの仕様  エアデータ電装部・機体下電装部のダミーデータをRaspberry Pi Picoを用いてメイン電装に送信する．  読み上げに使うセンサーデータのうち，メイン電装の気圧高度のみダミーデータを送ることは難しいが，3つのデータの中央値を取るためエアデータ電装部・機体下電装部の2つのデータで十分でSILS（Software In the Loop Simulator）は用意しない．   以下のようにダミーデータを変更してテストする．  水平飛び出し・ダイブの違い 気圧高度の正負の違い 気圧高度と超音波高度の食い違いの調整        ジョイスティック電装部 ハードウェア   ジョイスティック候補(選定はパイロット)\n Adafruit 秋月 千石  セイミツ工業のものはアナログジョイスティックではなくマイクロスイッチでON/OFFが分かるだけなので注意      可変抵抗を用いてニュートラル調整\n 抵抗値は10kΩ  あまり小さいと消費電流が大きく，あまり大きいと誤差が大きくなる ジョイスティックに合わせて10kΩを選定      サーボとICS基板との接続\n UARTをICS変換基板で半二重通信に変換してサーボと通信する ICS基板の接続 ICS変換基板自体は電源のためメイン電装基板に搭載    大電流を消費するため，サーボのあいてるコネクタにコンデンサを配置\n     部品 個数 価格     KRS-4034HV ICS 1 17,600   アルミローハイトサーボホーン 1 1,100   ICS変換基板 1 1,980   Seeeduino XIAO RP2040 1 830   小型アナログジョイスティック 1 528   ジョイスティック基板 1 319   可変抵抗 1 50    ソフトウェア  サーボモータ  ドキュメント  KRS-4034HV ICSの「市販のマイコンボード，小型PCボードから制御する」を参考に Arduinoライブラリ  Hardware Serialを使うのでライブラリはIcsClass_V210   ライブラリの使い方 ライブラリの詳細リファレンス   角度制御  フライト時はジョイスティックを読んでsetPos()で角度を指定するだけ   サーボ詳細設定(未実装)  以下の詳細設定をEEPROMに書き込んでおく．専用のプログラムを使ってサーボモータに対して一度書き込めば終わり．  ストレッチ スピード パンチ デッドバンド レスポンス ダンピング プロテクション リミッタ 温度制限 電流制限 フラグ       ジョイスティックまわりの関数  stick_normalized()でジョイスティックの値を-1～+1の小数として計測する．  ジョイスティックは可変抵抗の分圧でアナログ電圧が出力される仕組みで，analogRead()で測定できる． analogRead()は念のためオーバーサンプリングすると良い． analogReadResolution(12);の詳細はXIAOのwiki XY二方向あるので，三角関数っぽい計算をして-1～+1の小数に変換する．   control_curve_deg()で-1～+1を角度に変換する．  不感帯やカーブはここで設定する． 中心では繊細に動かして端では大きく動かすようなカーブを設定するのがこの関数の役割．   read_offset_deg()でニュートラル調整用の可変抵抗の値を読んでオフセット角度(トリム)を計測する． servo_write()で角度とオフセットを足してサーボに送信する．    機体下部電装部 ハードウェア  超音波センサとは 部品候補  10Hz以上で測定できる 近距離でも測定できる UART(RS232・TTLシリアル)以外で通信できる (XIAOのポートが埋まっているため)       部品 個数 価格     Seeeduino XIAO RP2040 1 830   マイクロSDカードスロットDIP化キット 1 300   超音波センサー URM37 V4.0 1 1,870   DPS310 1 1,408    ソフトウェア  [廃止]XIAO SAMD21での設計  メインループで行う処理  SDカードへの書き込み  書き込みに時間がかかるのでメインループ   超音波高度の取得  測定に時間がかかるのでメインループ SDカードの書き込みより早く測定できることはないのでメインループでOK     割り込みで行う処理(XIAOは割り込み一つ)  メイン電装へのUART送信  UARTフォーマットにのっとって，気圧・温度・気圧高度・超音波高度を送信する センサーの測定レートはバラバラだがUART送信は100Hzで行う．それぞれのセンサーについて測定できたタイミングで値をグローバル変数に書き込み，ISR内で100Hzで送信する． 処理時間がシビアなので，DPS310の32Hzの測定タイミングに合わせて送信する．グローバル変数を使うのは同じ．   メイン電装からのUART受信  文字列を受信し，そのままmicro SDに書き込む． 文字列をバッファに入れるだけで，SDへの書き込み自体はメインループで行う．   気圧センサのデータ取得  メインループで行うと測定レートが遅くなるので割り込み内で行う． 100Hzで最新の値を取れるわけではないので，最新値が取得できたときだけグローバル変数に書き込む．         関数名 起動タイミング 概要     loop() メインループ 超音波高度の取得・SDカードへの書き込み   ISR_100Hz() 割り込み100Hz メイン電装へのUART送受信・気圧センサのデータ取得     割り込みを下手にやると事故るので，RP2040のマルチコアをうまく使う．ただしvolatileには注意．\n CORE0で行う処理(32Hz over)  気圧センサのデータ取得  32Hzで最新値が取得できる． 測定できたらグローバル変数に書き込む．   メイン電装へのUART送信  UARTフォーマットにのっとって，気圧・温度・気圧高度・超音波高度を送信する． DPS310の32Hzの測定タイミングに合わせて送信する．グローバル変数から測定データを取得する．   メイン電装からのUART受信  文字列を受信し，そのままmicro SDに書き込む． SDカードへの書き込みも32Hzには収まることが確認できたのでCORE0のループで行う．     CORE1で行う処理(超音波センサーに合わせて遅くてOK)  超音波高度の取得  サンプルコード 測定に時間がかかるので別コアで処理する． そもそも測定距離に応じて測定時間が変化する． 自動で25Hz程度で測定されるが，TRIGにパルスを入力するとそれに関係なく測定を開始する． 測定エラー時は50000usが返ってくる．最大測定距離の500cmでは25000usが返ってくるのでこれを上限としてグローバル変数の測定結果に書き込む．         関数名 起動タイミング 概要     loop() CORE0のループ 気圧センサのデータ取得・メイン電装へのUART送受信・SDカードへの書き込み   loop1() CORE1のループ 超音波高度の取得       LED 制御CORE 点灯タイミング     白(独立3色合成) CORE1 超音波測定トリガ送信中   赤(NeoPixel) CORE0 UART受信中   青(NeoPixel) CORE0 気圧センサ通信中(32Hz)    エアデータ電装部 ハードウェア  校正は非常に難しいため，以下の方法は選択肢から外した．校正済みの既製品が入手できるなら問題ない．  五孔ピトー管 風車   測定精度の観点だと超音波式風向風速計は性能が良いが，高価で空気抵抗が大きいことから除外した． 熱式風向風速計は応答速度が低く，屋内での風環境測定を想定した製品で飛行機向きではない． AoAはピッチ測定で代用し，風見鶏を付ければ校正なしで計測可能なAoSは加工面での製作難易度の高さから見送った．風見鶏を作る場合は応答性に注意．  以上の理由でピトー管のみで製作した．差圧センサはSensirionのSDPを使用する．公式でArduinoライブラリが用意されていて使いやすい．他にも温度補正の効くセンサーとしてHoneywell RSCシリーズがあり，これらはピトー管係数が1から大きく外れないと言われている．\n差圧センサーはHoneywellのRSCかSensirionのSDPがとてもよい．これ使ってからピトー管係数が1から大きく外れたことがない．微差圧計測は温度補正の効くセンサーに限る\n\u0026mdash; へーりん (@pakfat50) June 1, 2022  --    製品 方式 振動 ドリフト チューブでの圧損     Honeywell RSC ダイヤフラム 影響あり あり 影響なし   Sensirion SDP 流量 影響なし なし 影響あり      方式と設計方針の選択肢\n ピトー管からチューブを伸ばして翼の安定した部分にダイヤフラム式のセンサを配置する ピトー管のそばに流量式のセンサを配置する    今回は流量式のセンサを使用する\n ドリフトの調整を省略できる チューブの圧損は設計で確定するが，フライト時の振動は想定しづらい    SDPの中のSDP810-500PAを採用\n ノイズに弱いアナログではなくI2C通信 125Paで14～15m/sなので，念のため500Paのレンジ 簡単に手半田可能なパッケージ SDP811はI2Cアドレスが違うだけ    CFRPのパイプに全部いれる\n 強度はいらないけど軽いパイプがほしい センサは(削れば)内径30mmに入る マイコン・気圧センサも30mmに入る もともと内径30mmだったけどCFRPのラインナップの都合で外径30mmに変更して基板とセンサを削った 露出する唯一の電装であり，テレビの映像として使われやすいので見た目はこだわったほうが良い       部品 個数 価格     Seeeduino XIAO RP2040 1 830   マイクロSDカードスロットDIP化キット 1 300   SDP810-500PA 1 5,261   ピトー管 1 1,397   DPS310 1 1,408   CFRPパイプ 1 4,264    ソフトウェア  [廃止]XIAO SAMD21での設計 SDカードに書き込み(数十ms)を行いつつ100HzレベルでUART通信を行うため，SDカード書き込み中にUART処理を割り込む必要がある．print()の処理に割り込みが使用される関係で，素朴なタイマ割り込みルーチン内でprint()を使うと問題が発生する(そしてXIAOで変なことするとブートローダーが壊れる)．Arduino Dueと同様にタイマ割り込みの優先度を下げることで対応する．\n メインループで行う処理  SDカードへの書き込み  書き込みに時間がかかるのでメインループ     割り込みで行う処理(XIAOは割り込み一つ)  メイン電装からのUART受信  文字列を受信し，そのままmicro SDに書き込む． 文字列をバッファに入れるだけで，SDへの書き込み自体はメインループで行う．   メイン電装へのUART送信  UARTフォーマットにのっとって，気圧・温度・気圧高度・超音波高度を送信する センサーの測定レートはバラバラだがUART送信は100Hzで行う．それぞれのセンサーについて測定できたタイミングで値をグローバル変数に書き込み，ISR内で100Hzで送信する．   気圧センサのデータ取得  メインループで行うと測定レートが遅くなるので割り込み内で行う． 100Hzで最新の値を取れるわけではないので，最新値が取得できたときだけグローバル変数に書き込む．   差圧センサのデータ取得  メインループで行うと測定レートが遅くなるので割り込み内で行う． 100Hzでグローバル変数に書き込む．         関数名 起動タイミング 概要     loop() メインループ SDカードへの書き込み   ISR_100Hz() 割り込み100Hz (気圧センサが取得できたタイミングで)気圧センサのデータ取得・差圧センサのデータ取得・メイン電装へのUART送受信      CORE0で行う処理(32Hz over)  気圧センサのデータ取得  32Hzで最新値が取得できる． 測定できたらグローバル変数に書き込む．   差圧センサのデータ取得  データレートが十分高いので，DPS310の測定タイミングに合わせて測定を行う． 測定できたらグローバル変数に書き込む．   メイン電装へのUART送信  UARTフォーマットにのっとって，気圧・温度・気圧高度・差圧・対気速度を送信する． DPS310の32Hzの測定タイミングに合わせて送信する．グローバル変数から測定データを取得する．   メイン電装からのUART受信  文字列を受信し，そのままmicro SDに書き込む． SDカードへの書き込みも32Hzには収まることが確認できたのでCORE0のループで行う．         関数名 起動タイミング 概要     loop() CORE0のループ 気圧センサのデータ取得・差圧センサのデータ取得・メイン電装へのUART送受信・SDカードへの書き込み       LED 制御CORE 点灯タイミング     白(独立3色合成) CORE0 SD書き込み中(sd.flashのみ)   赤(NeoPixel) CORE0 UART受信中(sd.add_str含む)   青(NeoPixel) CORE0 気圧センサ通信中(32Hz)    カメラ    ~~部品 個数 価格~~     SP360 4K 1 20,565   防水ケース 1 9,720   JOY700(楽天で中古入手) 1 3,800     メリット  姿勢，翼のたわみ具合，垂直尾翼の角度などのデータが確実に取得できる   デメリット  ツルツルのカウルに突起ができる    配置の詳細 メイン電装部    緑のところのコクピフレームに固定する\n 他だとダメな理由  着水時にPに当たる可能性があって危ない(発泡に埋め込むのはメンテだるい) (パイプの隙間に配置)Pの腕とかで邪魔そう 重心調整で桁を動かすから邪魔 足で蹴られそう ハッチの邪魔 ハッチの邪魔      固定は桁ではなくフレーム側\n 他の電装がフレームにつくから サーボは胴体桁ではなくテール桁なので桁に電装があるメリットなし 詳細な固定方法は電装の実物ができてから検討    胴体桁の左右にバッテリー，メイン電装，GPSモジュールを分けて配置する\n  搭載スペース\n 左右160mm×上下方向60mm×前後300mm が左右で2つある 電装本体はこれより小さい(バッテリーGPS除いて60×30×120)    実際に取り付けた様子\n 板ごと取り外しできるのでメンテナンスしやすいが，重量はもったいない\n    サーボのケーブル  胴体桁部分は桁の外側を通す 桁の外側でコネクタを繋ぎ，テール桁に接続する  コネクタは脱着のため外に出ていると良い\n画像の左側が胴体桁，それに接合された右側がテール桁   テール桁の側面に穴を開け，ケーブルを埋め込む  サーボがテール桁に埋め込まれるからケーブルも埋め込む    ジョイスティック電装部  ジョイスティックに近いフレームに結束バンドで固定 取り付け後もUSBケーブルがさせるような向きでマイコンを搭載した\n  スピーカー  フレームに結束バンドで固定\n  機体下電装  メイン電装部の画像の黄色の部分に配置する  後方だと蹴られる 高度取得のため機体の一番下に取り付けたいので桁や翼には配置したくない   フレームではなくカウルに基板を固定する  カウルに超音波センサ用の穴を開けてを埋め込みたい フレームにセンサを取り付けるとカウルの取付精度に制約が生じる 重量はケーブル含め50g程度なので問題ない   カウルに中継ケーブルを這わせておき，カウルをフレームに取り付けたあと，青部分でフレームのケーブルと接続する  カウルをフレームに取り付けてから基板を取り付けるのは，パイロットが乗る板やハッチと干渉するため困難 テグスもここまで這わせてフレームに縛り付ければロスト対策もOK\n    エアデータ電装部  左BC間に固定する  ABは理科大で先に接合しておくため，露出するちょうど良い接合部はBC間   基板を全てCFRPの内径30mmのチューブ内にまとめ，チューブの底面からケーブルを出す チューブを桁に固定する専用フランジを作り，チューブは専用フランジに予め固定しておく  桁同士を接続するフランジに追加工をすると強度が心配なので，専用のフランジを使用する 専用フランジと桁は養生テープで固定する(何周かすれば強度は十分)\n    カメラ  主翼桁の前の養生の発泡の上に埋め込む  胴体桁軸上に配置したい フライト直前にアクセスできる位置に  読売からNOGOが出ればダミーロードを載せられるように カメラはケーブル繋がないので埋め込んでOK   テグスでロスト対策はする    製作のポイント 電装基礎知識 このブログの担当範囲は鳥人間の電装についてで，電子工作の技術はまた別のお話\n これ 有識者のTwitter  ソフトウェアの管理  GitHub  organizationはTORICA-23th  コンポーネントごとにリポジトリを作る(ブランチ説明したくないしconflictさせたくない) どうせ引き継ぎはどこかで失敗するので23代だけのorganizationにした． 同じ理由でリポジトリはすべてPublic． GitHubの使い方  公式ドキュメント 動画 Conventional Commits     複数のマイコンで使用する自前ライブラリは全てTORICA_libで共有 丁寧にブランチ切ってプルリク飛ばしてレビューしてって体制が理想だけど，班員全員の作業を班長が見てるのでmainブランチに直push．    基板設計  基板設計はKiCadを使う．  KiCad ことはじめ  全体像はこれの10ページが分かりやすい   KiCad 6.0 動画解説  基本的に動画解説の流れにそって進めればOK     ソフトウェアと同じGitHubで管理する．  リポジトリは分ける．   Tips  参考：パッド寸法 Arduinoシールド  Arduino Dueは外形が同じなのでMegaのシールド(マイコンボードの拡張基板)のテンプレートが使える   XIAO KiCadライブラリ シンボル自作方法 フットプリント自作方法 基板外形 自動配線ツール  KiCadのPCBエディタでパターンを引くのは機械任せにできる   JLCPCB発注方法   寸法図など  C基板サイズ 超音波 気圧 XIAO micro SD    基板実装  はんだ付けに関しては↓を見ればOK\n   部品を両面に実装する場合などは部品を取り付ける順番に要注意 防塵・防水  金属・CFRPのカケラが基板に落ちて短絡するなどを防ぐ必要がある 樹脂によるポッティングは不可逆なので避けたい カプトンテープをペタペタ貼って保護する 防水のため防湿コーティング剤を使うのもありかも    テスト 時間が無く十分なテストはできなかった．\n共通事項  フライトまでバッテリーが持つ  ロングラン試験   着水時に発煙・発火しない  サーボモータ部分を短絡させ，発熱発火しないこと，短絡復帰後に動作することを確認する．   フェールソフト  機体下部電装部のコネクタを引き抜いたうえで短絡させ，ログと操舵が動作し続けることを確認する． エアデータ電装部のコネクタを引き抜いたうえで短絡させ，ログと操舵が動作し続けることを確認する． 操舵系のみの電源供給ができることを確認する． SDを引き抜いても操舵が動作し続けることを確認する．   メンテナンス性  機体を組んだ状態で電装の電源を起動できる 機体を組んだ状態で電装のプログラムを変更できる  機体下電装部・エアデータ電装部もUSBケーブルを伸ばしておくべきだったかも     耐候性  各コンポーネントを接続し，50℃以上30分以上の動作を確認する．リポバッテリーは防爆バックに，他は黒い紙で覆って直射日光に曝す． BBM，EMで水没試験を行う．\n短絡故障はしないことが確認できた．波形はかなり歪む．   電気的制約  機体に取り付けた状態で，波形を確認する．    操舵  基本  操縦桿を動かし，ラダーを動かせる． 手でトルクをかけ，ラダーが動作することを確認する．   その他の要件  可変抵抗を操作し，ニュートラルの位置を変更できる． 操舵系のみの電源供給，操舵系以外のみの電源供給の両方が選択可能である．    テレメトリ  スマホでテレメトリを受信できることを確認する． 通信距離を確認する．  高度速度計  ハッチを閉じたとき気圧高度の取得に影響がないことを確認する．  ハッチを閉じたとき，気圧高度の中央値にスパイクが表れないことを確認する．    ロガー  全てのデータをタイムスタンプつきで記録できることを確認する． 着水時にデータをロストしない  SDを抜いてデータがロストしないことを確認する．この試験はTBD回行う．    最終的な仕様 概要 全体像は基本設計から変更なし\n実測重量\n メイン電装全体 670g  木の板 190g 基板類 280g 電源BOX 200g  バッテリー 70g     エアデータ電装部 170g  CFRPの筒 123g ピトー管と差圧センサ 17g 基板 20g ケーブル 12g   機体下電装部 31g ジョイスティック電装部 20g  コンポーネント詳細 UARTのプルアップを忘れたので各基板にUARTのRXにプルアップ抵抗を違法建築した．\nメイン基板  ソフトウェア 基板\n  無線ハブ基板  基板\n  テレメトリ受信機  ドキュメント  ジョイスティック電装部  ソフトウェア 基板\n  機体下部電装部  ソフトウェア 基板\n  エアデータ電装部  ソフトウェア 基板\n  運用 琵琶湖の持ち物   コクピに取り付け済みの部品\n 組み立て手順参照    翼に取り付け済みの部品\n エアデータ電装部用の翼内のケーブル    取り付けしていない部品\n 基板・ケーブル(青ダンボール)  サーボ胴体桁ケーブル 機体下部電装部(超音波)  フォーマット済みmicro SD取り付け済み   機体下電装部カウル中継ケーブル 機体下電装部SD保護スポンジ テグス      エアデータ電装部(ピトー管)\n フォーマット済みmicro SD取り付け済み テグス取り付け済み ピトー管カバー    防爆バッグ LayLax GIGA TEC PSEリポ セーフティーバッグ\n リポバッテリーFM 850mAh(12.53V) リポバッテリーFM予備 850mAh(12.56V) リポバッテリー予備 2200mAh(12.51V) リポバッテリー予備 2200mAh(12.00V) 回収用ミニ防爆バッグ    交換部品(茶ダンボール大)\n サーボモータ予備 ジョイスティック電装部予備基板 ジョイスティック予備 エアデータ電装部予備基板 差圧センサ・ピトー管予備 機体下電装部予備基板 機体下電装部SD保護スポンジ予備 メイン電装部予備基板 Arduino Due予備 バッテリータッパー蓋予備    予備部品(茶ダンボール小)\n 電圧電流計予備 リセッタブルヒューズ予備 ラズピコ(HILS予備) デバッグ用ケーブルもろもろ 死んだ基板(部品取り) トグルスイッチ    ソフトウェア書き換えセット(ポリ袋)\n USB A-A延長ケーブル USB A-Cケーブル USB C-Cケーブル USB A-micro Bケーブル ラズピコ(HILS) デバッグ用スピーカー    線材予備(ポリ袋)\n SM5ピン SM4ピン サーボケーブル たくさん みじかいサーボ延長ケーブル シールド付スリムロボットケーブル4芯 3m × 2 AWG22 耐熱ワイヤー 10本 AWG24 耐熱ワイヤー 10本 XHアッセンブリワイヤ各色10本 電源用VHケーブル エナメル線    その他(ポリ袋)\n マスキングテープ カプトンテープ 6mm幅 カプトンテープ 15mm幅 結束バンド ビニールテープ    工具セット(ヒートガンダンボール)\n はんだごて FX-600 はんだ ハンダ吸い取り器 ハンダ吸い取り線 フラックス ラジオペンチ ニッパー ワイヤーストリッパー ドライバー マステ    リポ充電セット\n 充電器の箱  リポバッテリー充電器本体 G-FORCE GMD660P DC Charger G0344 リポ用ケーブル(XT60-T型ディーンズコネクタ) 12V用ケーブル(XT60-ワニ口) USB PD 12V変換基板   12V2.0A ACアダプタ 変換DCジャック付き    部物ポケットテスター\n  テレメトリ受信機 C-Cケーブルつき\n  AC100V延長コード\n  メイン電装防水カバー\n  私物\n  パソコン\n 全リポジトリclone済み・依存関係インストール済み    PC用バッテリー\n  オシロスコープ\n 本体(HDS272S) プローブ2本・テストリード2本 テストピンケーブル2本・ジャンパー線2本      ポケットに入れるもの\n SDカードケース ポケットテスター マスキングテープ ミニ養生テープ ハサミ    全組・TF運用 6/4 全組  エアデータ電装部の基板のハードウェア故障  前日まで動作していたエアデータ電装部が動作しなくなった．後日解析すると気圧センサーとの通信に失敗して停止していることが分かったが，根本原因の特定はできなかった．   エアデータ電装部の取付時の馬(機体を乗せる台)との干渉  接合時は馬にB側の桁を乗せるので，C側に取り付けることにした．    6/11 全組  エアデータ電装部のトラブルシュートができておらず，重心に関してはエアデータ電装部は左右バランスにしか影響しないので接続しなかった． スピーカーの信号線のノイズによる動作不良の可能性を潰すためにスピーカーとサーボを同時に動作させ，トラブルが発生しないことを確認した． サーボはひとまず動いたが，レンジ調整が必要だった．サーボをテール桁にエポで固定した後に調整する．  6/18 TF  まだサーボの固定をしていなかったので垂直尾翼なし． 全データの取得を確認し，発進時の加速度等のデータを得た．  7/02 全組  垂直尾翼の動作，全データの取得を確認．  このときは超音波センサ用の穴をカウルに開けていなかった．    7/09 TF  強風のため中止．  7/22 全組  超音波センサの問題が発覚した．  組み立て 各チェックボックスごとに写真を撮影すること！\nテール桁事前準備  サーボモータをテール桁に埋め込む．  テール桁サーボケーブルを中子に通し，マステで仮止めする． 中継コネクタを引きながら，中子をテール桁に押し込む． サーボモータにコネクタをさし，テール桁に埋め込む．  サーボをエポキシで固定する．    コクピ事前準備  コクピフレームへの基板・ケーブル配置\n以下のケーブルが取り付けられていることを確認する．  スピーカー  スピーカー・スピーカーケーブル    操舵  ジョイスティック(基板とフレームに板を挟んで接着剤でつけたうえでテグス固定) ジョイスティックアナログケーブル(両端XHコネクタだがピン配置が異なる) ジョイスティック電装部(基板とフレームに板を挟んで結束バンド固定) ジョイスティックICSケーブル    エアデータ(コクピ内の配線は無し) 機体下  機体下電装部フレーム中継ケーブル      メイン電装部の組み立て  板の下から8個全てのネジの合いマークを見て緩みがないことを確認する． 無線ハブ基板とメイン電装部がケーブルで接続されていることを確認する．   メイン電装部の取り付け  吊り具を使って電装の板をコクピフレームに固定する．可動域の中で一番前方に micro USBコネクタ2つに緩みがないことを確認する．   コクピ内ケーブルをメイン電装部に接続する．  機体下電装部フレーム中継ケーブル ジョイスティックICSケーブル スピーカーケーブル     A翼B翼の接合  翼の接合  (接合班)A翼とB翼を接合する．作業中，電装班はケーブルに負荷がかからないかチェックする．   ケーブルの接続  AとBの中継コネクタを接続する．   導通チェック  ジャンパー線で片方のコネクタの2端子を接続し，もう片方のコネクタの該当端子をテスターで導通しているかチェックする．   フタサット(翼の接合部を埋めるカバー)付け  (翼班)フタサットを取り付ける．      \u0026mdash;-↑ここまで理科大，↓ここから琵琶湖\u0026mdash;-\n電装の検品・バッテリー準備  緩みの確認  電装固定ネジ8箇所 メインSD メイン電装コネクタ ジョイスティックコネクタ ジョイスティック電装部コネクタ   バッテリー搭載  バッテリーの電圧をテスターで測定し，12.5V以上であることを確認する． バッテリーのコネクタを接続し，タッパーに入れる．   動作確認  T字桁へのフレーム取り付け  エアデータ電装部ケーブル  Z翼のリブから出るエアデータ電装部のケーブルを翼の上に置く．  (コクピ班)T字桁にフレームを吊り具で固定しする． エアデータ電装部のケーブルをメイン電装部に接続する． ケーブルの余った部分を養生テープでT字桁に固定する．    サーボケーブル  サーボケーブルをメイン電装部に接続する． カウル1を取り付ける． カウル2の穴にサーボケーブルを通す． カウル2を取り付ける． サーボケーブルを胴体桁に養生テープで仮止めする．     機体下電装部の接続  カウルへの機体下電装部の取り付け  機体下電装部をカウルに取り付ける． 基板のネジ穴にテグスを結びつけ，テグスをカウルの前方にマステで仮止めする． [] 機体下電装部カウル中継ケーブルを接続し，コネクタをカウルの前方にマステで仮止めする．   カウルの取り付け  (コクピ班)カウルを取り付ける．   接続  機体下電装部カウル中継ケーブルと機体下電装部フレーム中継ケーブルを接続する． 機体下電装部のテグスをフレームに取り付ける．     エアデータ電装部の接続  翼の接合  (接合班)A翼をコクピのZ翼に接合する．作業中，電装班はケーブルに負荷がかからないかチェックする． (接合班)B翼をC翼に接合する．作業中，電装班はケーブルに負荷がかからないかチェックする．   ピトー管の取り付け  (接合班)エアデータ電装部をフランジに取り付ける．筒の中心がリブの印に重なるような角度で取り付ける．   ケーブルの接続  AとZの中継コネクタを接続する． Bとピトー管の中継コネクタを接続する．   動作確認  テレメトリ受信機を用意してから電源スイッチをONにし，エアデータ電装部と通信できていることを確認してから電源を切る．   フタサット付け  (翼班)フタサットを取り付ける．     尾翼の接続  テール桁の接合  (接合班)テール桁を接合する．   ケーブルの接続  テール桁の中継コネクタを接続する．   動作確認  電源スイッチをONにし，尾翼を操舵できることを確認して電源を切る．    (いつでも)動作確認  仮接続  動作確認用エアデータケーブルを用いて，Z翼の中継コネクタに直接ピトー管のケーブルを接続する． ピトー管の穴に付いているマスキングテープを剥がす. 動作確認用4P中継ケーブルを使用して，機体下電装部カウル中継ケーブルと機体下電装部フレーム中継ケーブルを接続する． 予備のサーボモータを接続する．   動作確認  テレメトリ受信機をスマホに接続し，シリアルモニタで通信を開始する． メイン電装部の電源スイッチをONにする． 起動直後のダウンリンクデータが取得できていることを確認する． 超音波センサを手で遮り，スピーカーが鳴ることを確認する． 超音波センサから地面までの距離を変化させ,超音波高度が変化することを確認する． ピトー管に息を吹き込み，対気速度が変化することを確認する． ジョイスティックを動かし，サーボモータが適切に動作することを確認する．   取り外し  電源スイッチをOFFにする． 動作確認用エアデータケーブル，エアデータ電装部を取り外す． ピトー管カバーを付ける. 機体下電装部カウル中継ケーブル，機体下電装部を取り外す． 予備のサーボモータを取り外す．    トラブルシュートマニュアル メイン電装の書き込み Arduino DueはProgramming PortとNative Portの2つのUSBポートが存在する．マイコンがハングアップしているとNative Portからは書き込みができないが，Programming PortはSerial(エアデータ電装部に接続)と共通のポートを使用しているため，書き込み時はSerialには接続しないでおく必要がある．\nあらかじめProgramming PortとNative Portの両方にUSBケーブルを接続しておき，必要であれば琵琶湖でもUSBケーブルを延長してPCから書き込みを行う．通常時はNative Portから書き込みを行い，問題が起きたときはエアデータ電装部のスイッチを切ってProgramming Portから書き込みを行う．\n操舵系トラブル 以下のテストは全てメイン電装の電源を入れた状態で行う．\ngraph LR A[起動時のダウンリンクでICSの値は正常か] -- yes -- B[コクピから出ているケーブルに予備のサーボを接続して動作するか] B -- yes -- C[サーボの故障かテール桁内部での断線,ニュートラルロック] B -- no -- D[コクピ内サーボケーブルの接触不良,断線.可能であれば後部カウルを取り外して確認したいが,基本ニュートラルロック.] A -- no -- E[ジョイスティック電装部のマイコンの電源の赤LEDは点灯しているか] E -- yes -- F[ジョイスティック電装部にUSBケーブルをつないでシリアルモニタを開き,値が読み取れるか] F -- yes -- G[値は安定していて,ジョイスティック/ニュートラル調整つまみを操作して反映されるか] G -- yes -- H[ジョイスティックICSケーブルの接触不良,断線.] G -- no -- I[ジョイスティックアナログケーブルの接触不良,断線.] F -- no -- J[ジョイスティック電装部のソフトウェア故障.ソフトウェアを焼き直して予備基板に交換.] E -- no -- K[テスターでジョイスティックICSケーブルの電圧を読み,5V程度の正常な値になっているか] K -- yes -- L[ジョイスティックを取り外し,電源LEDは点灯するか] L -- yes -- M[ジョイスティックの短絡故障.アルミフレームへの接触がないことを確認し,予備に交換.] L -- no -- N[ジョイスティック電装部の短絡故障.アルミフレームへの接触がないことを確認し,予備に交換.] K -- no -- O[ジョイスティックICSケーブルの接触不良,断線.]   (function () { if (window.isMermaidLoaded) return; window.isMermaidLoaded = true; const script = document.createElement('script'); script.src = 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js'; script.onload = () = { mermaid.initialize({ startOnLoad: true }); }; document.body.appendChild(script); })();  当日の運用・取得データ シーケンス 7/29 フライト前日    時間 作業     7:17 トラックからテント物品積み下ろし   8:05 全員トラック駐車場到着   8:21 ブリーフィング   8:33 テント組立て班，機体積み下ろし班に分かれる   8:35 テント班，テントを持ってトラック駐車場出発   9:01 テント到着，組立て開始   9:06 機体組到着   9:28 機体仮設置場所用意   9:35 テントにトラック到着   9:47 トラックから機体積み下ろし完了   10:12 テント組立て完了   10:34 テント配置完了，テントへ機体搬入開始   10:51 機体搬入完了   10:54 機体保持，コクピアセンブリ，翼チェック，電装検品開始   11:05 左AB倒れる   11:10 讀賣インタビュー   11:29 電装検品完了   11:32 フレームのT字への取り付け完了   11:37 機体下電装部のカウルへの取り付け完了   11:40 昼休憩開始   12:00 昼休憩終了   12:02 機体後部カウル取り付け完了   12:37 コクピ養生完了，主翼接合開始   13:28 ピトー管取り付け完了   13:30 機体審査開始   13:46 機体審査完了，垂直動作確認開始   13:58 垂直動作確認完了   14:00 機体解体開始   14:38 機体解体完了   15:03 機体下電装ケーブルテグス接続完了   16:00 讀賣カメラ作業開始   16:59 夜間保持組ホテルへ移動開始   17:53 讀賣カメラ作業終了   18:42 電装班長撤収    7/30 フライト当日 フライト順は最後から3番目\n   時間 作業     5:24 夜間保持組で機体組み立て開始   5:55 T字配置完了(当日は湖岸に平行)   6:14 テール接合   6:19 水平取り付け   6:40 左AB接合   7:32 組み立て完了，機体移動開始   8:27 電装班長機体前到着，もろもろテスト   8:59 垂直サーボ付近銀シート取り付け完了   9:24 ピトー管銀シート取り付け完了   12:56 桟橋へ移動開始   13:25 桟橋垂直尾翼チェック完了   14:06 フライト   14:19 機体回収作業開始   14:41 フライトデータ確認    取得データ メイン電装部・機体下電装部・エアデータ電装部について，基板が脱落することなく全て回収できた．micro SDカードのデータも全て回収できた．\n  対気速度はプラホ上でも手持ちの風速計に比べて0.5 ~ 0.8程度遅かった ロールピッチはオフセットが±1程度あるかも(一応補正済み)    高度全般  5mから降下する時の超音波高度がメイン気圧と機体下気圧と一致しているので，この2つは信用できそう．気圧高度は着水後が0mになるように初期値を12mに設定してグラフにした．離陸滑走時の気圧高度のノイズはダイヤフラムの振動が原因と考えられる． エアデータ気圧に関して，ピトー管で測定した動圧を引いた値と生の値の中間にメイン気圧と機体下気圧があるので信頼性が低い．ピトー管を取り付けた翼の穴から風が回り込んで動圧がかかり高度が下がること，翼がたわんで高度が上がることの両方が考えられ，その影響具合を評価できない． GPS高度はもともと信頼性が低いが，傾向は問題なかった．   気圧高度が時間経過とともに上昇した．  フライト中は短いため分かりづらいが，フライト前のデータでは顕著だった． フライト直前にコクピの銀シートを外したため，コクピ内部の温度が上昇，気圧が低下していく傾向にあったのが原因と思われる． 全組は屋内で，屋外のテストフライトではカウルをつけなかったため問題が発覚しなかった． 気圧高度だけでなく気圧と温度の生データを保存したので解析が可能だった．(生データは必ず記録すること) 対策は難しそう．  早めに銀シートを外してコクピを暑い平衡状態にするとパイロットが大変． 気圧センサを外部に露出させると動圧がかかる．     超音波高度の問題  最終全組で超音波センサの外れ値問題に気づく．  単発の外れ値は問題ないようにソフトの対策は事前に行った．   フライト当日に0m付近の値を連続して出力する問題に気づく．  湖岸移動中の動作確認で発覚し，平らな板としてPCを砂浜に置くと正常に動作したため，砂浜との相性問題の可能性が考えられた． 連続した外れ値の対策は，アクセスが容易なメイン電装部ではなく，カウルを取り外してアクセスする機体下電装部で行う必要があった． 水面では動作する可能性が0ではなく，フライトを遅延させる可能性があり，パイロットには高度計の値が信頼できない可能性を伝えたうえでデバッグはしなかった．   超音波の外れ値により発進判定が誤作動した．  外れ値が連続したため誤作動した． 偽陰性よりは偽陽性の方がマシなので，誤作動を強く防ぐロジックは組まなかった． そもそもソフトに頼らずパイロットによるスイッチ操作を実装するべきだった．   外れ値の原因はセンサーの特性ではなくハードウェアの故障だった．  事前にセンサーの特性を試験していれば，外れ値が故障だと判断できた． 事前の試験がなくても，予備基板で試験を行って問題が起きているFMと比較することはできたはず．   姿勢が乱れたときに高度測定ができなかったが，これはしょうがない．    運用面の反省 悪かったこと  機体を組み立てるマニュアルは作っておいたが，テントから移動を開始しプラホから飛ぶまでのマニュアルが無かった．  SDカードケース・LiPoの防爆バッグを回収班に渡すのを忘れた．   熱対策の具体的な方法を事前に考えていなかった．  サーボモータ  唯一サーマルシャットダウン機能がある部品で，重点的に保護した． テール桁のサーボの前後の部分に氷をあて，タオルで巻いて養生テープで固定した．(移動5時間で3回交換) サーボ本体は結露を防ぐため氷はあてず，銀シートを巻いて直射日光が当たらないようにした．   コクピ  銀シートをコクピ上に被せた   エアデータ電装部  銀シートを被せた．     GPSの測位状態をダウンリンクしていなかったため，電源を入れるコクピ保持の人に1PPSのLEDを見てもらう手間があった． 湖岸でインターネットが使えなかった．  データシートはダウンロードできないし，このオンラインのページも見れない． 全リポジトリは最新にして，必要な資料はローカルに落とす． docomoとauが輻輳，SoftBankと楽天はヌルヌルで人力部門のサーバーアップもOKだったらしい． 読売の通信網にSoftBankがついてるので，SoftBankユーザーを把握しておくと良い．   予備のケーブルを作っておかなかった．  材料はあるから前日に気づいたら作れるし，当日に断線したら諦めて飛ばすし，まあいいかって気持ちだった． (予備を作ると予備を作ってないところが壊れるジンクス)   超音波センサーの保護カバーをつけておくべきだった．  今年は必須ではなかったが，雨だったら必須．    良かったこと  Twitterで他チームの電装情報を見てサーボの熱対策ができた．  Meisterさんのサーマルシャットダウンのツイート見てなかったら危なかった．   LINEの自分だけのグループでシーケンスを記録した． ほぼマニュアルに沿って運用できた． 動作不良による\u0026quot;電装待ち\u0026quot;が無かった．  直さなくても飛べるバグ(今回は超音波の問題)なら見逃す判断も大事．   ポケットに入るハサミと養生テープが便利だった． ポケットたくさんある空調服は神．  評価 サクセスクライテリア成否 操舵    サクセスレベル 内容 成否     Minimum プラホ上のラダー動作チェックでGo ✅   Full 飛行中に操舵し，動画などで確認する ✅   Advanced 操舵角のデータを回収する ✅    テレメトリ    サクセスレベル 内容 成否     Minimum 組立て時やプラホ上での電装の動作確認に使用する ✅   Full プラットフォーム上で姿勢を確認する ✅   Advanced フライト中にテレメトリを受信する ✅    高度速度計    サクセスレベル 内容 成否     Minimum 飛行中に高度と速度を読み上げる ✅   Full 読み上げた高度と速度が異常な値でない ❌   Advanced 発進判定を正常に行う ❌    ロガー    サクセスレベル 内容 成否     Minimum 飛行中の一つ以上のデータを回収する ✅   Full 全ての種類の着水までの全データを回収する ✅   Advanced Fullを満たし，全てのデータが信頼できる値である ❌    評価点 マネジメント系  設計の根拠が記録に残っているため，仕様変更のときに判断がしやすかった． 全組・TFで班長が不在のときがあったが，マニュアルに沿って運用できた．  ハードウェア系  バスはRS-485やCANにする必要はなく，スター型のUARTで必要十分だった． インジケータLEDやテレメトリにより電装の状態が分かりデバッグがしやすかった． 機体回収時，メイン電装を外さずにSDカードだけ簡単に回収できる設計だった．  ソフトウェア系  定期的にリファクタリングしてコードの可読性を保った． 直pushしかしていないとはいえ，GitHub Desktopでdiffを確認してからコミットできるので便利だった． マイコンの種類がDueとXIAOで異なるが，同じSAMシリーズで割り込みの優先度設定が同じようにできた．  結局割り込みは使わずXIAOもRP2040に変えた． 来年は全てRP2040統一が良さそう．    反省点 マネジメント系  テストを多く行うべきだった．  全組やTFなどの各タイミングに必要な最低限の機能を揃えるという意識になってしまったため，テストが十分にできなかった．  センサー等，コンポーネント単位で早めにロングラン試験を行う． 部品を壊す可能性があるものも含めテストをEMで徹底的に行う． 長い時間が取れる全組・TFの機会を無駄にしない．   実機が一つしかないため，ソフトウェア開発で専有されてハードウェアのテストが十分行えなかった．  EMとBBM，FMとEMなどの組み合わせで両方の作業を同時に行う．   可能であればTORICA_libのテストコードを書く，   新入生教育と電装製作の両立が難しかった．  一応来年の役割分担を見据えて仕事は振ったつもり．   超音波センサのトラブル対応に問題があった．  超音波の不具合に関して，外れ値を出すハードをソフトでどうにかするという発想しかなかった． あらゆるトラブルについて，それを抱えたま対処方法を考える人と根本原因を探る人を分けて対応するべき． 琵琶湖で緊急度の高いインシデントが起きたときも，インシデント管理と問題管理の人員を分ける．    ハードウェア系  超音波高度センサが故障した．  温度上昇による気圧高度変化を除き，サクセスクライテリア未達の原因は全てこれ． ハードウェアの故障だと判断して交換することができなかった．正常性バイアスもあるかも．   センサーの特性試験を行うべきだった．  既製品より自分の組んだハード・ソフトの方が信用ならない経験ばかりだったので，既製品のテストの優先度が低く手が回らなかった． 事前に特性試験をしていれば外れ値を出すことが故障だと判断できたはず． そもそも測定レンジが足りるか精度が問題ないかの試験もデータシートを鵜呑みにせず行うべき．   機体下電装部を交換しづらい位置に配置してしまった．  画像の5より後方なら交換できた． コクピのイメージができていない時期に場所を決定したため，ハッチやパイロットの足との干渉を心配して避けてしまった． 徹底的にメンテナンス性を考えて設計を常に見直すべき．   重量がかさむ固定方法になってしまった．  電装班としてはかなり便利だったので，設計変更時はメンテナンスや運用の視点も忘れずに．   翼のケーブルのはんだ付けが職人技すぎる．  翼を馬においた状態で，リブから出たケーブルに半田付けするのが慣れてないと相当難しい． 半田スリーブに頼る予定だったが，あまり良い製品ではなかった． 翼内のケーブルなど高難度の半田付けはもっと練習を重ねるべき．   ラダーのコントローラをよく選定したい．  アナログ入力を読むためジョイスティックを使用したが，実際はアナログではなくPWMのような操舵を行った． 今回のジョイスティックは小さく操作が繊細で，フルスイングで振るならスイッチの方が適しているはず．   メイン電装をRaspberry Pi Picoにするべき．  開発を始めた当時はラズピコがあまり普及しておらずArduino Dueの方が安定していると判断したが，今はもうOK． DueではUARTのポート数に余裕がなかったが，RP2040ではPIOでUARTを増やせる． Arduino Dueより小型化できる． 他のXIAO RP2040と同じチップなのでソフトウェアの移植が容易． デュアルコアが便利．   DCDC周辺の回路が雑で，出力側からの逆流に対して脆弱．  メイン電装との接続を切ってからUSBケーブルを繋ぐよう運用でカバーしてたので対策が必要．   サーボモータの詳細設定作業が終わらなかった．  トラブルが起きてもサーボを交換できないためテール桁に埋め込んだ後は作業を行わなかった． サーマルシャットダウンに関する設定もあるのでEEPROMの設定は変えておきたい．   今年はトラブルは起きていないが，部品の表面処理と半田の材質(鉛フリーかどうか)を合わせた方が良さそう． 基板にデカップリング・コンデンサをつけ忘れた．気づいたけど修正するのを忘れて発注してしまった． UARTのRX側にプルアップ抵抗をつけ忘れた．  ソフトウェア系   SDアクセス中に割り込みできるようにし，スケジューリングの自由度をあげたい．\n  部品のロングラン試験ができるコードを早く書く．\n  記録したcsvからグラフを生成するpythonコードを書く．\n データの確認を簡単にしてテストをしやすくする．    自力でライブラリを書かないことを目標にしたものの，TORICA_libがそれなりに難しい実装だった．\n 難しい部分をライブラリに押し込むことはできたが，結局低レイヤーの難しさは排除できなかった．    XIAOのブートローダーの仕様が致命的だった．\n FM製作後に気づいてしまった．BBM段階でソフトウェアを完成させることが非常に重要．    GPSモジュールから出力される対地速度を保存するべきだった．\n 今回は緯度経度から対地速度を計算した．    来年の方針 (無責任な老害が考えたことなので判断は現役に任せます)\n似た部品を使うハイブリッドロケット電装の経験がありスムーズ(?)に開発できましたが，来年は以下のことを意識すると良いと思います．\n 設計は流用しつつ，今年の反省点を参考に改善する  流用できるとはいえ，設計の根拠まで理解して使用する   BBM2回，EM1回，FM1回を作れるスケジュールで動く  経験値をつけるためには手を動かして失敗するしかない   役割分担を明確にする  ハードからソフトまでやることが多く，幸い班員も多いので分担できる 各担当にそれぞれの責任を果たせている感覚を持ってもらう  真に人海戦術ができる場合を除き，基本的に一つの仕事は一人でやる\n（相互にレビューはするべき） 誰かの仕事を待っている人は，明確に休み期間にするor別の仕事をはっきり割り当てる      教育・役割分担 一年で全領域を一人でマスターするのは厳しいので役割分担をした方が良さそう．基本的には以下のような役割分担で進める．サーボモータ・超音波センサ・電源回路など，狭いスコープを徹底的に詰める人が他にいてもいいかも．\n マネジメント  全体の進捗管理，設計のレビュー，テストケースの作成を行う\n要求を満たすものを期日までに完成させるのがマネージャーの目標 マネージャーはソフトウェアのスキルを持っているとうまく回るはず\n最後にソフトウェアが詳細な仕様を決定するので（諸説）   ソフトウェア開発・回路設計  ブレッドボードでの試作，KiCad上での回路図作成，ソフトウェア開発を行う 組み込みソフトなので回路設計とソフトウェアは分担しない\n当然ここが一番キツい仕事   ハードウェア設計  設計済みの回路図からKiCadで基板設計を行う 他の班と調整し，基板の形状や搭載方法の設計も行う   ハードウェア製作  はんだ付けなど全てのハードウェアの組立てを行う ただの単純作業ではなく，品質を担保するためには高度な技術が必要   テスト  製作側は手一杯になるので，別の人が念入りにテストを行う センサーのテストを通してソフト回路全般の知識をつける    スケジュール 電装は製作物が一点物で単純作業が無く，教えながら作業するのがまず不可能．\n4月以降は新入生教育に専念できるように3月にはロールアウトできるスケジュールを目指す．\n(今年のガントチャートは何をやるか，この来年のガントチャートは誰がやるかで区切ってます)\ngantt dateFormat YYYY-MM-DD axisFormat %m todayMarker off excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section 全体 基本設計 :compo , 2023-08-01,2023-09-01 新部品 :compo , 2023-09-01,2023-10-01 統合BBM :bbm2 , 2023-09-01,2023-11-01 EM :em , 2023-11-01,2024-01-01 休み :exam , 2024-01-01,2024-02-01 FM :fm , 2024-02-01,2024-04-01 FM詳細設計最終レビュー :milestone , 2024-03-01,1d 新入生教育 :edu , 2024-04-01,2024-06-01 全組TF等運用 :op , 2024-06-01,2024-07-30 鳥コン！ :milestone , 2024-07-30,1d section ソフト開発 回路設計 新部品BBM回路・ソフト :compo , 2023-09-01,2023-10-01 統合BBMの回路設計 :bbm , 2023-09-01,2023-11-01 BBMでソフト開発 :em2 , 2023-10-01,2023-12-01 EMの回路設計 :em , 2023-11-01,2023-11-14 EMでソフト開発 :em2 , 2023-12-21,2024-03-01 FMの回路設計 :fm , 2024-02-01,2024-02-14 FMでソフト開発 :fm2 , 2024-03-14,2024-04-14 section ハード設計 基板の搭載方法については適宜設計陣と調整 :hw , 2023-09-02,2023-09-01 Lチカ基板設計 :pcb , 2023-09-01,2023-10-01 マイコン練習用基板設計 :pcb2 , 2023-10-01,2023-11-01 EM基板設計 :em , 2023-11-14,2023-12-01 搭載位置・方法確定 :hw2 , 2023-12-01,2024-01-01 FM基板設計 :fm , 2024-02-14,2024-03-01 section ハード製作 ケーブルはんだ付け箇所試作 :cable , 2023-09-01,2023-10-01 Lチカ基板実装 :pcb , 2023-10-07,2023-10-14 センサー単体テスト用基板作成 : unit , 2023-10-14,2023-11-01 マイコン練習用基板実装 :pcb2 , 2023-11-07,2023-11-14 EMケーブル作製 :em , 2023-11-14,2023-12-01 EM基板実装 :em , 2023-12-14,2023-12-21 FMケーブル作製 :fm , 2024-02-14,2024-03-01 FM基板実装 :fm , 2024-03-07,2024-03-14 section テスト センサーのみの回路ソフトの理解 : learn , 2023-09-01,2023-11-01 センサー単体テスト : unit , 2023-11-01,2023-12-01 BBM統合テスト : bbm , 2023-12-01,2024-01-01 EM統合テスト : em , 2024-02-01,2024-03-01 FM統合テスト : fm , 2024-04-14,2024-05-14   (function () { if (window.isMermaidLoaded) return; window.isMermaidLoaded = true; const script = document.createElement('script'); script.src = 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js'; script.onload = () = { mermaid.initialize({ startOnLoad: true }); }; document.body.appendChild(script); })();  参考資料 電装系の資料は無限にあるので，鳥コンの電装の資料のみ\n Avionics for HPA 人力飛行機の電装系の製作日誌 Team\u0026rsquo;F\u0026rsquo;の電装の方のブログ Interface 2023年2月号～ 連載 舞いあがれ人力飛行機 ↑と同じ方の連載  さいごに  嬉しいよね\n","description":"鳥人間コンテスト2023滑空機部門に出場した，東京理科大学鳥人間サークル鳥科の電装のまとめです．サークル内部の開発用資料，引き継ぎ資料でもあります．","id":0,"section":"blog","tags":["鳥人間","電子工作"],"title":"鳥コン滑空機の電装の開発","uri":"https://771-8bit.com/blog/birdman-glider-avionics/"},{"content":"公式ドキュメントをまとめたつもり\nできること UARTの通信線をTWELITEで無線化する．\n※透過モードで使うためアプリを書き換える必要があります．\nピン接続 VCC・GND・モード設定ビット・UART送受信のピンを接続します．片方のTWELITEのモード設定ビットのM1ピンのみグランドに接続します．他はオープンで良いです．\nhttps://mono-wireless.com/jp/products/TWE-APPS/App_Uart/pinassign.html\n https://mono-wireless.com/jp/products/TWE-APPS/App_Twelite/asset/twe_app_pins.png\nTWELITEのTXをマイコンのRXに，TWELITEのRXをマイコンのTXに接続します．UART速度設定ピンは未接続で問題ありません．\nhttps://mono-wireless.com/jp/products/starter/system.html\n設定 TWELITE STAGEのダウンロード  TWELITE STAGEをダウンロードします．\n TWELITEをTWELITE R2に接続してからPCに接続します．\nhttps://mono-wireless.com/jp/products/TWE-LITE-R/r2-dip.png TWELITE STAGEを起動し，シリアルポートを選択します．\n  TWELITE R2との接続について  TWELITE DIPであればTWELITE R2に挿すだけで通信できますが，TWELITE SMDは以下の通りに接続します．\nhttps://twelite.gitbook.io/general/technical-info/progpins  アプリ書き換え  TWELITE STAGEを起動し，「アプリ書き換え」を選択します．\n 「BINから選択」を選択します．\n 「App_Uart_RED」のバイナリを書き込みます．バージョンは異なっても問題ありません．\nhttps://mono-wireless.com/jp/products/TWE-APPS/App_Uart/index.html 書き込みが完了したらEnterでインタラクティブモードに入ります．\n  App_Uart設定  インタラクティブモードに入ります．\n それぞれ設定を行います．設定したい項目の左に書いてあるアルファベット一文字を入力し，指示に従います．設定が終わったらSaveします．\nhttps://mono-wireless.com/jp/products/TWE-APPS/App_Uart/interactive.html  通信モードはデフォルトでは独自プロトコルしか受け付けない状態なので，透過モード(D)を選択します． ボーレートはマイコンとTWELITE間のUARTの通信速度であり，無線通信の速度ではないのでここで指定した通りのスループットはもちろん出ません． チャンネルを設定します．番号はIEEE802.15.4準拠で，デフォルトでは18chなので他のTWELITEと干渉する可能性がある場合は注意します．\nhttps://mono-wireless.com/common/images/overview/frequency.svg\n電波干渉回避のため3つまでチャンネルを選択できます．ピンのHLの通信なら問題ないですが，チャンネルを順番に切り替えて送受信するのでデータを取りこぼすことがありUARTには不向きです．\nhttps://mono-wireless.com/jp/products/TWE-APPS/interactive.html   ","description":"","id":1,"section":"blog","tags":["電子工作"],"title":"TWELITEでUART通信を行う方法","uri":"https://771-8bit.com/blog/twelite-uart/"},{"content":"ステンシルとクリーム半田が無くても一つぐらいならリフローはできる．\n1. はんだを薄ーく盛る 基板側に半田を薄くのせる．平な面のあるコテ先を使うと良い．リフローしないランドにはんだツノを作っておくと焼き上がりが分かりやすい．温度を下げたコテ先に付けて放置した半田を使うとツノが作れる．部品側はフラックスを多めに塗って半田がつきやすい状態にしておく．\n左：もとの基板　右：はんだを薄く盛った基板\n2. ホットプレートをアツアツにする 最大火力にする．焼き上がった時にすぐ回収すればリフロー温度プロファイルなんて関係ない(はず)．\n3. 基板を投入する 基板をつかんでホットプレートに投入する．クッキングシートを忘れずに．\n3. 部品を押し付ける 部品がズレないように注意しながら部品を押し付ける．ホットプレートと基板の熱伝導を良くする目的と，溶けた半田を部品につける目的がある．盛った半田のバラツキで部品がガタつく場合は基板だけ押し付けて半田を溶かした後に部品を押し付けると良い．\n4. 頃合いを見計らって回収する フラックスのいい匂いがしてきたら完成．部品がズレないように注意しながら取る．スルーホールにラジペンを突き刺すと取りやすい．明らかに部品が浮いていたりズレていたりする場合は再度リフローする．\n5. おわり フラックスが揮発しているのでホットプレートをよく洗うこと．\n","description":"ステンシルとクリーム半田が無くても一つぐらいならリフローはできる．","id":2,"section":"blog","tags":["電子工作"],"title":"ステンシルもクリーム半田も無い人の基板クッキング","uri":"https://771-8bit.com/blog/hotplate-soldering/"},{"content":"​星取県宇宙ビジネスプランコンテストで月面におけるワイヤレス給電に関するビジネスアイデアを提案しました。私はプロトタイプの製作を担当しました。\n 星取県宇宙ビジネスプランコンテスト 鳥取県は美しい星空や鳥取砂丘での月面実証実験を活用して「星取県」という名前を掲げており、宇宙をテーマにしたビジネスプランコンテストが開催されました。\nhttps://www.space-biz-tottori.com/より\nチーム「Lighthouse」 Lighthouseは、ビジネスサイドの阿部舞哉(あべま)とエンジニアの私がメンバーです。あべまは模擬人工衛星のCanSat開発、私はハイブリッドロケット開発のサークルに所属し、その縁でチームを結成しました。\n月面でのワイヤレス給電 ビジネスプランは「月面にワイヤレス給電を用いたエネルギーインフラを構築する」という内容です。ワイヤレス給電機能を備えたエネルギー給電スタンドを設置し、ローバーや宇宙服などに電力を供給します。鳥取砂丘は月面によく似た環境であり、実証実験の場として最適です。\nワイヤレスのメリット ワイヤレス給電により有線コネクタを排除することは、レゴリス対策・ロボットによる制御の観点からメリットがあります。\n 非常に細かく鋭利で、静電気や磁気を帯びた砂であるレゴリスの影響を受けない。 コネクタ挿抜のために正確な位置制御を行う必要がなく、ロボットに簡単に電力を供給できる。  給電スタンドのメリット ローバーの電力供給として、スタンドからの給電はランダー(着陸船)からの給電と太陽電池による自家発電の間をとったバランスの良い方法です。\n    探査範囲  ローバーの設計      ランダー給電 ❌ ランダー周辺のみ ✅受電のみのシンプルな構成   太陽電池搭載 ✅制限なし ❌ 大きな発電装置が必要   給電スタンド ✅スタンドを点在させ広範囲に ✅ 無線の受電装置のみ    ワイヤレス給電の方式 ワイヤレス給電には様々な方式があります。今回は最も単純な電磁誘導方式から試作しました。\n    効率  伝送距離  特徴      電磁誘導 70%～90% 数mm～数cm Qi規格などで利用   磁界共振 40%～60％ 数cm～数m モビリティ給電で注目   マイクロ波 長距離ほど低下 数m～∞ 長距離送電が可能    https://www.b-plus-kk.jp/wireless_1/wireless_2_1.htmlより\nプロトタイプ製作 今回のコンテストは1/22に「ワイヤレス給電でなんかやろう」という状態でチームを結成し、実際のプロトタイプは3週間で開発しました。\nスケジュール ガントチャートに空白期間があるのは、鳥人間の電装と火星ローバーの電装作ったりスキー行ったりH3の打ち上げ(2/17の方)を見に行ったりしてるからです。ロケットがないだって？ｹﾞﾎｹﾞﾎ\ngantt dateFormat YYYY-MM-DD axisFormat %m-%d todayMarker off section 全体 チーム結成 : milestone, 2023-01-22,1d リサーチ :reserch , 2023-01-23,2023-02-04 プロトタイプ目標設定 : milestone, 2023-02-05,1d 書類提出 : milestone, 2023-02-20,1d 最終審査 : milestone, 2023-02-26,1d section 予定(理想) ラジコン完成 : milestone, 2023-02-17,1d 磁界共振対応 : milestone, 2023-02-26,1d section 製作 1号機製作(モーター回す) : first, 2023-02-06,1d 2号機製作(ラジコン試作) : first, 2023-02-07,2023-02-08 3号機製作(ギヤードモータ) : first, 2023-02-15,1d 4号機製作(2輪化) : first, 2023-02-22,2023-02-23 スタンド製作 : first, 2023-02-20,2023-02-24   (function () { if (window.isMermaidLoaded) return; window.isMermaidLoaded = true; const script = document.createElement('script'); script.src = 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js'; script.onload = () = { mermaid.initialize({ startOnLoad: true }); }; document.body.appendChild(script); })();  リサーチ まずは電磁誘導方式や磁界共振方式のワイヤレス給電を試すため、ファンクションジェネレータつきのオシロスコープでコイルとコンデンサを適当につけてちょっとした実験をしてみました。コイルにコンデンサをつけると振幅が大きくなるのは確認できましたが、現状のノウハウから短期間で長距離大電力の伝送を実装するのは難しそうだと判断しました。\nプロービングが雑なのは許して\n試作で挫折しかけてた時にちょうどこのツイートを見て、スーパーキャパシタと工作用のソーラーモーターがあれば小電力のワイヤレス給電でもローバーが作れると気づきました。\nスカイツリーから受信した電力でモーター回してみました https://t.co/CX08x9C5jA pic.twitter.com/mmO2LHuMYT\n\u0026mdash; しんいち💉💉💉💉 (@shinichi_8o2) February 4, 2023  ワイヤレス給電自体は、自作は一旦後回しにしてSeeed製のモジュールを使えることを確認しました。\n目標決定 ビジコンまでは月面で有用なワイヤレス給電技術を開発するのではなく月面でワイヤレス給電が有用であると示せるプロトタイプを制作する\nと割り切って目標を設定しました。\n試作機 1号機 1号機では給電モジュールとスーパーキャパシタで走行できることを確認しました。\n スーパーキャパシタが強力で、15秒の充電で5分程度モーターを駆動できた 3.3vの昇降圧DCDCはトラブルなく動作した ソーラーカーのモーターとタイヤではスピードが早く操縦性に難がある  2号機 2号機ではTWELITEを使って操縦できることを確認しました。\n 片方のタイヤがスリップして走行できない 後転できないと不便だしチップトランジスタじゃなくて素直にモタドラ使ったほうがいい こっちのスーパーキャパシタは公称値に比べて全然電荷が貯まらない  3号機 3号機ではギヤードモータと大きめのタイヤで走行できることを確認しました。↓残ってた写真がこれだけでした。\n ギヤ比1:50のギヤードモーターと50mm径のタイヤを3.3Vで回すとちょうど良い 軽すぎて発進時にウィリーになる タイヤ径が前後で違うとダサい。大きい4輪？クローラー？2輪？  手持ちのクローラーで試したら旋回時の抵抗が大きすぎたので2輪が最適そう(←当たり前)    完成品 ローバー  モータードライバを使用 モーターの固定は取り外しできるように結束バンド スタビライザーも結束バンド スーパーキャパシタは5F5.4V 充電状態を可視化するためにLEDを追加(思ったよりカッコよくなった)   これにカプトンテープを貼って金のシートをかけてそれっぽい見た目にしました。TWELITEのアンテナはシートの中でも問題ありませんでした。\nコントローラ コントローラーはTWELITEのデジタル入力ピンに3ポジションのスイッチをそのまま接続して終わりのシンプルな構成です。\nスタンド 3号機で示した通り中身はなんと牛乳パックです。シートを被せてソーラーパネルをつけるとそれっぽい見た目になりました。小電流でも自動でシャットダウンしないIoT機器対応 モバイルバッテリーを内蔵しています。\n優勝！  あべまの圧倒的プレゼン力により優勝できました。鳥取に行く前に電電宮に行ったり直前までスライドを修正したりした甲斐がありました。（賞金は今回の開発費と旅費でだいたい飛びました…）\nワイヤレス給電を謳いながら今回はワイヤレス給電の開発をしたわけではないので、今後は地に足をつけて電磁気や電波関連を学んでいきたいです。\n","description":"​星取県宇宙ビジネスプランコンテストで月面におけるワイヤレス給電に関するビジネスアイデアを提案しました。私はプロトタイプの製作を担当しました。","id":3,"section":"blog","tags":null,"title":"宇宙ビジコンでサッとプロトタイプを作って優勝してきた","uri":"https://771-8bit.com/blog/space-biz-tottori/"},{"content":"Windows PCの環境構築備忘録\n初回起動時  ローカルアカウントで作成  user下のフォルダ名を好きにいじるため   マイクロソフトアカウントへのログインに切り替え  ソフトウェアアップデート  Windows Update メーカーのプリインストールソフトでドライバ・BIOSアップデート  不要なソフトのアンインストール  サードパーティ製ウイルス対策ソフト(Windows Defenderを有効化) その他プリインストールソフト  設定変更  ディスプレイの拡大縮小を100%に 拡張子・隠しファイルを表示 スリープ無効化 パネルオープンパワーオン無効化 電源ボタン・高速スタートアップの解除 ダークモード・アクセントカラーはブルーグレー アクティブ時間を15:00~9:00に(夜間の自動再起動防止) タスクバー項目の設定 おすすめ非表示  ソフトのインストール マイナー(偏見)なものはリンクつき\nインストーラーのインストーラー ここは順番通りにインストールすると楽\n Chrome  uBlock Originは必須   google日本語入力 7-zip Windows 11 Classic Context Menu マウスとか周辺機器のソフト AutoHotKey  基本ソフト  Google Drive Mery EarTrumpet Vivaldi FireFox Office TeX Live Adobe Acrobat Reduce PDF Size CubePDFpage gnuplot MATLAB Mathematica  連絡ツール  LINE Slack Discord Zoom Skype  開発系 一般  VScode Visual Studio Git GCC Python DevToys PowerToys  組込  Arduino IDE Teraterm Serial Monitor Essential PortPop SD card formatter Etcher VNC ラズピコ  ハード  Fusion360 KiCad Quadcept LTspice OpenRocket  画像  Paint.NET GIMP draw.io Inkscape XnView  動画  OBS Studio VLC youtube-dl LosslessCut DaVinci Resolve  システム  everything WizTree CrystalDisk Info Mark CoreTemp HWmonitor CPUID ","description":"","id":4,"section":"blog","tags":null,"title":"PC環境構築","uri":"https://771-8bit.com/blog/pc-settings/"},{"content":"CapsLock+WASDを↑←↓→にする方法\n 概要 頻繁に使用する矢印キーは右の小指で押しづらい位置にあるのに、最も要らないCapsLockキーはとても押しやすい位置にあります。そしてCapsLockの隣には移動でおなじみのWASDキーがあります。CapsLock+WASDを↑←↓→にするのは必然です。必ず設定しましょう。\n Change KeyでCapsLockキーをF13キーと認識させる AutoHotkeyでF13+WASDを↑←↓→にする  Change Key 後述するAutoHotkeyではCapsLockを認識できないことがあるので、別のソフトを使ってF13として認識させます。\n 窓の杜からインストールします。 Change Keyを起動し、CapsLockキーを選択します。\n 右上のscan codeをクリックします。\n F13のスキャンコードである0064を入力します。\n 「登録」してから「終了」します。\n  AutoHotkey  公式サイトからインストールします。 任意のディレクトリに、以下の内容の\u0026quot;hoge.ahk\u0026quot;というファイルを作成します。 1 2 3 4  sc0064 \u0026amp; w::Send, {Up} sc0064 \u0026amp; a::Send, {Left} sc0064 \u0026amp; s::Send, {Down} sc0064 \u0026amp; d::Send, {Right}    作成した\u0026quot;hoge.ahk\u0026quot;をダブルクリックして起動し、正常に動作していることを確認します。 \u0026ldquo;hoge.ahk\u0026quot;のショートカットを作成し、こちらのサイトの通りにスタートアップに登録します。\n ","description":"","id":5,"section":"blog","tags":null,"title":"WASDを↑←↓→にしよう！","uri":"https://771-8bit.com/blog/wasd2arrow/"},{"content":"セキュリティ・キャンプ2022のX3【ハードウェア魔改造ゼミ】の参加記です。ルーターにArduinoをつなげてスマホから操作できるラジコンを作りました。\nX3 ハードウェア魔改造ゼミ 概要 Wi-FiルーターにArduinoをつなげてスマホやパソコンから操作できるラジコンを作りました。セキュリティキャンプの中でも異色のゼミですが、分野を問わず存在する攻撃から守るために幅広い分野について知るべきで、電気回路からHTTPまで全レイヤーを触ってみようという趣旨になっています。\n この講義は電波法への抵触リスクに慎重に配慮して実施されていると講師から案内がありました。また、講義内でも電波法について学んだ上で制作しました。 ハードウェア構成  黒枠内のラジコンにWi-Fiルーターを搭載し、スマホ・パソコンなどのクライアントからHTTPでルーターのサーバーと通信して操作します。モーターはルーターにUSBケーブルで繋いだArduinoからモータードライバ経由で回します。\n GL.iNet GL-MT300N-V2  このルーターにはオープンソースのOpenWrtが初めからインストールされていて、Raspberry Piのようなシングルボードコンピュータとして扱えます。無線通信に関するコードを直接書き換えることはしないので、Raspberry Piのプログラミングと同じように電波法には抵触しません。   Arduino Nano Every TB6612使用 Dual DCモータードライブキット ツインモーターギヤーボックス  Arduinoからモーターを回す ArduinoはUARTで以下の情報を受け取ります。\n 左右のモーターの回転方向（ブレーキ・ニュートラル・時計回り・反時計回り） 左右のモーターの回転速度\n  これをモータードライバに伝えてモーターを回します。\n モータードライバのHブリッジ回路で回転方向を切り替え ONとOFFを高速に切り替え(PWM)、平均電力をコントロールして速度調整\n  今回は電源がモバイルバッテリーの5V系一つしかないため、モーターの大電流による電圧降下からArduino・ルーターを守る必要がありました。\n 回路にコンデンサを追加して瞬間的な電流をカバー PWMのON/OFF比(Duty比)の最大値を低くする PWM周期を短くして電源電圧の振動を軽減 Duty比をゆっくり目標値に近づける 過負荷で電源電圧が落ちたらDuty比を半分にする  以下のオシロスコープの波形は黄色がPWM信号、青色がラジコン全体の電源電圧です。\n\nサーバーの実装 ArduinoをUSBケーブルでルーターに繋ぎ、MicroPythonからモーターの状態をUARTで操作します。このMicroPythonの上にnanowebというフレームワークでWebサーバーを実装します。\n以下の機能を実装しました。\n 矢印・STOP ボタンによる前後左右の動作 レンジスライダーによる左右のモーターの直接操作 ポーリングにより状態を同期し、複数クライアントでの同時操作に対応  ラジコンのフェイルセーフ HTTPでやりとりするリソースであるJSONのデコードに失敗するバグが発生しました。時間内に根本原因は特定できませんでしたが、try-exceptで対処しました。他にもバグがある可能性に備えて、フェイルセーフとして異常終了時にはモーターを停止するようにプログラムを変更しました。\n1 2 3 4 5  try: loop.run_forever() //メインループ開始 finally: s.write(\u0026#39;0,0,0,0;\u0026#39;) //Arduinoにモーター停止を伝える s.close() //シリアルポートを閉じる   コントローラーのフロントエンド実装 JavaScriptはサーバーとの通信に関わるのでそれなりに理解する必要がありましたが、HTMLやCSSは雰囲気で書きました。よくわからんが、まぁ動いてるからヨシ！\n日記 日記という名のメモ\n8/8(1日目)  開講式・LT会・共通講義・グループワークのみで開発ゼミの時間はなし  8/9(2日目) 電気回路  STBYピンを基板内部でプルアップ モーターの極性は揃えた 電流食い過ぎ\u0026amp;電圧ヤバすぎ問題に気づく  とりあえずたくさんコンデンサをつける  470uFと100uFを外付け 基板内に10uFの積セラあり   分圧してADCにつっこむ回路を組む  基準電圧が電源電圧だと意味がないので1.1V基準にするため12kと3kで分圧 INTERNALじゃだめでINTERNAL1V1でやった      マイコン開発  電圧降下対策でPWMの周期を早めた  Hの時間が長かったらその間ずっと降下する 手順  ググって出てきたブログで叩くべきレジスタを特定 データシートを読んで内容を理解、レジスタを書き換える TCAを書き換えたためPWMと一緒にdelayも爆速になってしまうことを確認。一度はdelay_msをdelay*64で用意して乗り切ろうとした ググってQiitaでタイマの割当を知り、使うタイマとPWMピンを変更。それに合わせてレジスタを叩く     ロケットのテレメトリのコードを移植してカンマ区切りでデータを渡せるようにした (爆アド)  ルーターセットアップ  家のWi-Fiが見つからない！  家のルーターの設定で2.4GHzのアクセスポイントを無効にしていたのを思い出し2.4GHzに切り替え  電子レンジでよく切れた      ルーターとマイコンを結合  minicomの設定いじいじ  ハードウェアフローコントロールの解除(必須なのかは不明)  Arduino→minicomはできたけど逆ができなくて、その対処としてやった   minicom→Arduino  minicomは改行コードなしでキーを押した瞬間に送信(TeraTermと同じ) 改行コードを使ってコマンドをパースしてたので改行コードの有無に関係なくカンマとセミコロンでパースできるように変更。(これもロケットのコードから移植)   改行コード  CR+LFで送ると二行改行しちゃう CRで送ると改行するだけでカーソルが戻らないのでminicomでCRを有効化     HTTPを学ぶ curlからHTTP通信ができることを確認 pythonからUART叩いてモーター回すとこまでやった  8/10(3日目) サーバーサイドをサンプルコードで動かす  まずはREST APIはいじりたくなかったのでUARTの通信内容を書き換えて動作確認 curlで動作確認  フロントエンドもサンプルコードで動かす  まずはサンプルコードでボタンの動作確認 その後スライドバーでスロットルを直接動かす機能を実装  電源とかPWMとか  モーターをぶん回したらルーターの電源が落ちた  ちゃんと（？）制御をやってみる   ルーターの電源回路を観察  809RLと書かれた部品を発見  データーシート 電源電圧を監視してリセットをかける部品 下限電圧は2.63Vで意外と余裕があることが判明   レギュレーターのドロップアウト電圧を知りたかった  電源回路にインダクタがあったのでDCDCを組んでそう スイッチング用っぽい素子の詳細は不明   MCU自体の下限は2.97V  データシート   5Vから結構攻めて良さそうだったのでとりあえず3.3V+マージンで3.5Vを下限にした    CSSとの格闘  最低限はできたのでCSSと格闘  bootstrap何もわからん 全部vmで設定    複数端末の対応  ここらへんでREST APIをようやく理解 定期的にGETしてデータをもらう形式で実装 定期実行でアロー関数が使えないらしく、普通の関数に書き換え  理由は知らない 参考？   JSONのデコードに失敗してサーバーが落ちる不具合が発生  try-exceptで回避 プログラム終了時にシリアルを閉じる直前にモーター停止のフェイルセーフ    8/11(4日目) モーターが片方しか回らないバグの対処  オーバーロードしたら両方同時に出力を切るように変更  原因じゃなかった ずっと出力がおかしいから一時的な制御の問題じゃなくて通信の問題   ISR内部でのシリアル通信をやめた  通信を見ると明らかにUARTでの送信ができてなかった ISRでフラグ書き換え、メインループでフラグ監視方式 Serialが衝突しないから通信エラーがなくなった    GETの頻度を1Hzから2Hzに  ちゃんと動いた  発表資料の作成  Marpはいいぞ  8/12(5日目)  いろいろ発表  開発コース以外のイベント LT会 参加者交流としてLT会が設けられています。講師・チューターの方と、受講者の希望者が発表します。1日目のLTを見て自分も発表したくなり、さらにその日のグループワークのテーマ決めでCPU自作の話題が出たので4日目に4bit CPU自作について発表できました。ブログをMarkdownで書いておくとMarpで簡単にスライドにできるのでおすすめです。\nグループワーク セキュリティ・キャンプ終了後も、受講生同士で集まって好きなことができるようにグループワークが用意されています。自分のグループではRustの勉強会をすることになりました。他のチームではメンバーの興味がバラバラなため、さまざまな分野が協力できるCTFや分野指定なしのブログリレーなどをするところが多かった印象ですが、このチームでは全員Rustに興味があったのでRustを選択できました。\n完走した感想  とにかく楽しい  サンプルコードはあったけど2,3日で集中して作るのが楽しい discordでいろいろ話すのが楽しい   安定したハードを作るのが大事  ハードが信頼できないと上のレイヤーに上がれない（今回は電源）   基本情報/応用情報の勉強が役に立った  ネットワークとかHTTPとか、広く浅く知るのには良かった   手を動かす、大事  サンプルコードを参考に手を動かして独自の機能を実装するうちにHTTP通信を理解できた   勉強したいことが増えた  UARTとHTTPをMicroPythonで簡単に繋げられたので、中間の組み込みLinuxをやってみたい  終わったけどスタート感はある#seccamp\n\u0026mdash; 8bitマイコン (@771_8bit) August 12, 2022   ","description":"","id":6,"section":"blog","tags":["セキュリティ・キャンプ"],"title":"セキュリティ・キャンプ2022 X3 参加記","uri":"https://771-8bit.com/blog/seccamp-x3/"},{"content":"BME280の詳細なチューニングと設定ごとの精度や応答速度についてまとめました。BMP280でもほぼ同じように設定できます。\n環境 マイコンはArduino互換のSeeeduino XIAO、センサーは秋月電子のAE-BME280、ライブラリはAdafruitのものです。ボードのメーカーやライブラリが異なっても設定項目は同じです。\n設定項目 ライブラリに丸投げすればread()などの関数で値を読むことはできますが、用途ごとに精度や消費電力を最適化する場合やライブラリを自作する場合に必要な設定について簡単にまとめました。主にデータシートの3. Functional descriptionの内容です。\n測定モード BME280には2つの測定モード(3.3 Sensor modes)があります。\nForced Mode Forced Modeでは、マイコンからの命令により1サイクルだけ測定をしてマイコンに送信します。\nNormal Mode Normal Modeでは、常に測定を繰り返して値をセンサー内(出力レジスタ)に保存し、マイコンからの命令により最新の値を送信します。測定を繰り返す頻度は測定そのものにかかる時間($t_{measure}$)と待機時間($t_{standby}$)によって決まり、$t_{standby}$を明示的に指定します。\n測定の流れ BME280にオーバーサンプリングと内蔵IIRフィルタの機能があるため、\u0026ldquo;1サイクル\u0026quot;の測定が複雑になっています。センサーの出力レジスタの値が書き換わるのが\u0026quot;1サイクル\u0026quot;です。まずそれぞれ機能の説明をしたあと、測定の流れについてまとめ直します。\nオーバーサンプリング 1サイクルで温度・気圧・湿度をそれぞれ複数回測定して出力値を安定させることができます。測定回数はそれぞれ独立に設定でき、測定を省略することも可能です。\nIIRフィルタ オーバーサンプリングが1サイクル内で複数測定するのに対し、IIRフィルタは前のサイクルまでの値を使って出力値を安定させます。IIRフィルタは$filter_{coefficient}$という定数で設定します。この定数を用いて、前回の出力レジスタの値$data_{filtered-old}$と最新のセンサーの生の測定値$data_{ADC}$の加重平均を計算して新しい出力レジスタの値$data_{filtered}$とします。なお、$data_{ADC}$はオーバーサンプリング後の値です。\n$$ data_{filtered}=\\frac{data_{filtered-old}\\cdot (filter_{coefficient}-1)+data_{ADC}}{filter_{coefficient}} $$\n$filter_{coefficient}$は1,2,4,8,16が設定でき、1にすると式から明らかなようにIIRフィルタが無効になります。\n1サイクルの値をそのまま出力するわけではないのでノイズが減りますが、複数サイクルの値を使うので応答速度が下がります。この遅れはデータシートのFigure 7: Step response at different IIR filter settingsを参照してください。\n全体の流れと測定時間 Figure 6: BME280 measurement cycleの通りです。\n 測定開始 気温測定(オーバーサンプリング含む) 気圧測定(オーバーサンプリング含む) 湿度測定(オーバーサンプリング含む) 出力レジスタ更新(IIRフィルタ含む) 測定終了  測定時間$t_{measure}$はオーバーサンプリングをどの程度するかによって決まり、9.1 Measurement timeの通り計算できます。\nAdafruitライブラリでの設定方法 Adafruit_BME280.hのsetSamplingを用いることで設定を変更できます。引数の定数は同じファイルに列挙型で定義されています。\n221 222 223 224 225 226  void setSampling(sensor_mode mode = MODE_NORMAL, sensor_sampling tempSampling = SAMPLING_X16, sensor_sampling pressSampling = SAMPLING_X16, sensor_sampling humSampling = SAMPLING_X16, sensor_filter filter = FILTER_OFF, standby_duration duration = STANDBY_MS_0_5);   チューニング 編集中\n3.5 Recommended modes of operation\n","description":"","id":7,"section":"blog","tags":["電子工作"],"title":"BME280の詳細設定","uri":"https://771-8bit.com/blog/bme280/"},{"content":"セキュリティ・キャンプ2022のX3【ハードウェア魔改造ゼミ】に通過したので応募課題の回答を公開します。\n応募したコース 「電気回路からHTTPに至るまで全レイヤーに触れる」というところが楽しそうだったので、X3を第一希望にしました。X1とX4も課題の内容が被っていたため応募しておきました。\n X3【ハードウェア魔改造ゼミ】 X1【リバースエンジニアリングゼミ】 X4【無線通信ハッキングゼミ】  課題 セキュリティ・キャンプ全国大会2022 オンライン 開発コース X3【ハードウェア魔改造ゼミ】応募課題\n (1)以下の技術用語について解説してください。またどのようなところで使われているかも述べてください。わからない場合は調べて、自分なりに解釈した結果を述べてください。\n「オームの法則」「UART」「SPI(Serial Peripheral Interface)」\n(2)マイコンのファームウェアをデバッグするためには、どういう方法がありますか？\n(3)電気には直流と交流があります。同じ電圧のとき、どちらが感電したときに危険だと思いますか？その理由と一緒に説明して下さい。また感電はどんな工夫をすれば防げるでしょうか、思いつく限り多く挙げてください。\n(4)このデータシートから、以下の情報を読み取ってください。\nデータシートURL：\nhttps://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf\nrp2040-product-brief.pdf (raspberrypi.com)\n・GPIOに5.0Vを入力しようと思います。この機器は正常に動作しますか？\n・この機器でSPI通信は使用できますか？\n・IOVDDとDVDDの違いを説明してください\n・SWDポートを使うと何ができますか？\n・GPIO 1ポートから標準で何mA出力できますか？またGPIO合計で最大何mAまでの電流を出力できますか？(ただしQSPIポートで使用する電流は考慮しないものとします)\n(5)以下の質問に答えてください。\n・電波を発射する装置を日本国内で合法的に使用するには、「電波法で定められた基準に適合しているという証明」が得られた無線機が必要です。この証明の名前はなんですか？\n・市販されている無線ルーターの多くには、機能を完全に置き換えられる純正ではないファームウェアが存在します。非純正のファームウェアがインストールされた状態でWi-Fiを有効化すると、上記の証明が無効になり違法となる可能性があります。何を原因としてその可能性が生じるのか考察してください（簡潔な記述を望みます・400文字以内）。\n 回答 ※内容の正確性は保証できません\n(1)技術用語の解説 オームの法則 オームの法則は、回路に流れる電流Iが電圧Vに比例するという法則であり、V=RIと表されます。この比例定数Rを電気抵抗といいます。これは電磁気学の範囲では導出できない経験則で、導出する場合には物性物理の範囲に踏み込む必要があります。また、オームの法則に従わない非線形素子も存在し、半導体はまさに非線形素子です。\nオームの法則なしに電気回路について考えることはできません。単純な例として、LEDの保護抵抗を計算するためにもオームの法則は必要です。定格の電流を流すため、電源電圧からLEDの電圧降下を引いた電位差を定格電流で割ることにより保護抵抗を求めます。この抵抗を直列にLEDに接続することでLEDに定格電流を流すことができます。\nUART UARTはUniversal Asynchronous Receiver/Transmitterの略で、2つのデバイスの間でシリアル通信を行うプロトコルです。\nシリアル通信は、複数の信号線を用いてデータをまとめて送受信するパラレル通信に対して、データを1bitずつ順に送受信する通信方式です。組み込み用途で使われるシリアル通信としては、UART・SPI・I2Cが有名です。\nシリアル通信には、1対多で通信できるものもありますが、UARTは1対1の通信で、マスター(親機)・スレーブ(子機)の区別はありません。\nUARTでは基本的には送信用のTXと受信用のRXという信号線のみで通信します。片方機器のTXをもう片方の機器のRXに繋いでデータを送ることができます。基本的には互いにTXとRXを接続する全二重通信を行いますが、一方向通信で良いときは片方のTXと片方のRXだけを接続した単向通信も可能です。また、フロー制御を行うためCTSやRTSといった信号線を接続することもありますが、あまり一般的ではありません。\nUARTのAはAsynchronousの頭文字で、クロックを使用しない非同期式という意味です。予め決めた速度でTXからビット列を送信し、その速度でRXから読み出してデータをやりとりします。クロック線に同期して信号をやりとりするものは、USART(Universal Synchronous Asynchronous Receiver/Transmitter)といいます。\nUARTはデータはパケットに分割して送受信されます。パケットはスタートビット・データビット・パリティビット・ストップビットで構成されます。通信の開始と停止を示すのがスタートビットとストップビットです。データビットが実際に通信したい内容であり、5～9ビットが使用できますが7～8ビットが一般的です。パリティビットは通信内容に誤りがないか確認するためのビットです。データビットの長さ・パリティビットの詳細・ストップビットの長さは、通信速度とともに使用する機器同士で共有しておく必要があります。\nUARTは1対多ではなく1対1の通信となるため、マイコン間での通信や、マイコンとパソコンとの通信・マイコンと通信モジュールとの通信に用いられることが多いです。通信が高速なSPIや電気的にやや不安定なI2Cが同じ基板内のデバイス同士での通信に使用されるのに対し、UARTは異なる機器同士での通信も可能であり、差動伝送に変換すればより長距離での通信が可能となります。\nSPI(Serial Peripheral Interface) SPIはSerial Peripheral Interfaceの略で、1対多でシリアル通信を行うプロトコルです。\n一つのマスター(親機)がバス全体を制御します。チップセレクト(CS)・スレーブセレクト(SS)などと呼ばれる線を用いて通信相手となる子機を選択して通信します。デイジーチェーン接続も規格上可能ではありますが、あまり一般的ではありません。\n信号線には、マスター出力/スレーブ入力のMOSI・マスター入力/スレーブ出力のMISO・クロックのSCLKがあります。MOSIとMISOが独立しているので送受信を同時に行う全二重通信です。マスターから選択されていないスレーブのMISOはハイインピーダンスとなるので影響を与えません。\nSPIはクロックを用いた同期通信で、比較的高速な通信が可能です。クロックには、アイドル時にHにするかLにするかを指定する極性(CPOL)と、データのサンプリングを立ち上がりにするか立ち下がりにするかを指定する位相(CPHA)の設定があり、マスターとスレーブで一致させておく必要があります。\n通信の開始・停止はCS(SS)で行うので通信するパケットに特にルールはないですが、8bitごとに通信するのが一般的です。\nSPIは比較的高速に1対多の通信が行えるので、センサーなどの周辺機器とマイコンとの通信に利用されます。また、SDカードもSPI通信で使用することができます。\n(2)マイコンのファームウェアのデバッグの方法 デバッグツールとしては、ICE、ROMエミュレータ、OCD、デバッグモニターがあります。MPUと差し替えて使用し、MPUがどう動作するかエミュレートするのがICE(In-Circuit Emulator)です。MPUごとにMPUよりも複雑なICEを開発する必要があるため非常に高価であり、今は主流ではありません。プログラムを動作させるMPUではなくプログラムを格納するROMを差し替えて動作中のROMの様子を調べるのがROMエミュレータです。マイコンにROMが内蔵されるようになったため、これも主流ではありません。現在一般的に使われているのはOCD(On-chip Debug)です。デバッグしたいマイコン自身がもつデバッグ用の機能を外部から利用するもので、JTAGやSWDといった規格が有名です。デバッグモニターはマイコンとPCなどを接続し、マイコンのソフトウェアからシリアル通信などで必要なデータを送信するものです。単純なLチカデバッグやprintfデバッグもデバッグモニターといえます。\nOCDを使うと、プログラムを一つずつ実行したり、マイコン内部の様々な状態を取得したり、高度なデバッグができる。デバッグモニタではソフトウェアで書いた少ないデータしか読み取れませんが、簡単にデバッグができます。\nこのようなデバッグツールを使った上で、バグを洗い出し、さらにバグの原因を特定して修正する必要があります。バグの洗い出しでは、細かいモジュールごとにテストを繰り返して早期にバグを発見することが重要です。テストには、機能仕様に基づいたブラックボックステストや、プログラムの内部実装に基づいたホワイトボックステストがあります。\nテストで見つけたバグの原因を特定するときは、プログラムが動作する理由をしっかり理解したうえで、その仕組みを小さな構成要素に切り分けて一つずつ調べていきます。切り分けた各部分について、デバッグツールを用いて想定通り動作しているか調べたり、条件を変えて調べたりして原因を特定し修正していきます。\n(3)感電とその対策 交流の方が危険です。同じ電圧(実効値)のときは発生するジュール熱は同じなので火傷のリスクは同じになると考えられます。しかし、人間の筋肉は電気信号に従って動いていて、直流では筋肉が硬直するのに対し、交流では筋肉が痙攣します。交流で感電した場合は心室細動がおきる可能性があり致命的です。\n感電対策として、電子機器を使うときは、漏電遮断機を使用すること、アースを接地すること、コンセントにカバーをすること、劣化した電子機器を使用しないこと、濡れた手で電子機器を触らないことに気をつけます。さらに、電子機器を作ったりメンテナンスしたりする場合には、絶縁工具を使用すること、保護具を着用すること、活線作業は原則として行わなわず、検電器で確認すること、電線は一本ずつ扱うこと、導体部を露出させないことに気をつけます。\n(4)データシートの読み取り 入力電圧 5.2.3.1. Absolute Maximum RatingsのVoltage at IOはIOVDD + 0.5 Vとなっていて、IOVDDの上限は3.63Vであるため正常に動作しません。また、tolerantという単語でデータシート内を検索するとFault Tolerant Digitalという機能が見つかりますが、これは5V tolerantではありません。\nSPI通信 4.4. SPIから分かるように、2系統のSPI通信がマスタースレーブどちらでも使用できます。\nIOVDDとDVDDの違い 1.4.2. Pin Descriptionsにあるように、IOVDDはデジタル入出力ピンの電源であり、DVDDは内部のコアの電源です。Figure 2. A system overview of the RP2040 chipにおいて、IOsのみを駆動するのがIOVDDであり、USBやADCなどの例外を除いた内部回路を駆動するのがDVDDです。\nSWDポート SWDはSerial Wire Debugの略で、マイコンのデバッグができます。2.3.4. Debugにあるように、具体的には以下のことが可能です。\n 本来主記憶装置として使われる揮発性のSRAMや、外部のフラッシュメモリへのファームウェアの格納 プロセッサの動作を手動で進めたり、動作状況を確認したりすること メモリやIOの状態の確認  出力電流 2.19.4. Padsからわかるように、1ポートからは最大12mAを出力できます。ただし、Table 621. Pin Typesからわかるようにデフォルトでは4mAで、Table 351. GPIO0,GPIO1,…,GPIO28,GPIO29 Registersのようにレジスタを書き換えることで設定を変更できます。\n5.2.3.4. IO Electrical CharacteristicsのMaximum Total IOVDD currentから、合計で50mA出力できると分かります。なお、吐き出し(sorce)電流がIOVDD currentで吸い込み(sink)電流がVSS currentで、RP2040ではどちらも50mAで同じです。\n(5)技術基準適合証明 無線通信に関係しないソフトウェアを変更することは問題ないですが、そのファームウェアが無線通信を担っている場合には違法となる可能性があります。技適のある無線ルーターのハードウェアを用いても、ソフトウェアによって無線通信の電波強度や周波数帯、送信休止時間などが変更できる場合は電波法で定められた基準に適合しなくなる可能性があるからです。この場合はハードウェアの改造と同じように扱われ、技適が無効となり違法となります。例えば、WiFiモジュールESP-WROOM-02はソフトウェアを書き換えることができますが、専用のライブラリやSDKを使っている限りでは無線通信の仕様には関係ない部分のソフトウェアを書くことになるため、認証には影響はありません。しかし、SDRに関わるソフトウェアを変更する場合には違法となる可能性があると考えられます。　(366字)\n","description":"","id":8,"section":"blog","tags":["セキュリティ・キャンプ"],"title":"セキュリティ・キャンプ2022 X3 応募課題晒し","uri":"https://771-8bit.com/blog/seccamp-assignment/"},{"content":"DashWareというソフトウェアを使い、自作ロガーで取得したデータを動画にオーバーレイ表示する方法をまとめました。\nDashWareとは DashWareは、ロガーで取得したデータを動画にオーバーレイ表示できるソフトウェアです。車・自転車・ドローンなどレースの編集によく使われているようですが、鳥人間コンテストやハイブリッドロケットの動画編集でも便利だと思います。\nネットには既製品のロガーでの使い方はありましたが、自作ロガーへの対応はほぼ手探りで調べたことをまとめたので間違いがあるかもしれません。\nDashWareの使い方 インストール 公式サイトからダウンロードできます。\nプロジェクトの作成 File -\u0026gt; New Projectより、新しいプロジェクトを作成します。Project Templateはデフォルトで表示されるゲージの設定だけなので\u0026lt;None\u0026gt;で問題ありません。\n動画の読み込み 以下のように動画を読み込みます。\nデータの読み込み 同様にデータを読み込みます。\nここからEdit ProfilesをクリックしてData Profileの設定に移ります。\nData Profileの作成 Data Profileを設定することで自作ロガーに対応させます。この記事の本題です。\nここでDashWare Loggerをクローンして自作ロガー用のプロファイルを作成します。名前はMy Loggerにしました。\nCSVのフォーマット 自作ロガーからデータをCSVで吐き出し、Separator Settingで設定した区切り文字、Decimal Formatで設定した小数点にフォーマットを合わせます。\n1行目にはHeader Lineなるものが必須のようで、\u0026ldquo;hello\u0026quot;など適当な文字列を置いておく必要があります。\nCSVファイルは以下のようになります。\n \u0026ldquo;hello\u0026rdquo;\n\u0026ldquo;Time\u0026rdquo;,\u0026ldquo;Elevation Meters\u0026rdquo;\n0,-0.3609\n0.1,-0.3809\n0.2,-0.4609\n0.3,-0.4609\n\u0026hellip;\n データ名の対応 2行目に指定するデータ名は、Column Mappingsで指定します。Column Mappingsの行をダブルクリックし、Data Column Mapping Editorを開きます。\nInput ColumnのInput Data ColumnでCSVファイルに書いたデータ名を指定します。ドロップダウンリストではなくコンボボックスなので好きな文字列を入力できます。ラジオボタンは文字列を含むか完全に一致するかどちらでデータを取り込むかの選択です。CSVファイルでデータ名はダブルクォーテーションをつけることに注意してください。\nColumn Mappingでは、取り込んだデータをDashWare内でなんという名前で扱うかを指定します。カテゴリーとその中の種類を指定するようになっていて、選択肢にないものは選べません。\n時間の設定 時間をもとに動画と同期させるので\u0026quot;Time\u0026quot;は\u0026lt;Required\u0026gt;となっていて必須です。CSVファイルの\u0026quot;Time\u0026quot;の列を時間として読み取ります。単位は秒で正の数しか受け付けません。\nカウントダウンを含む場合など、負の時間を含む場合はこれとは別にデータ列を用意します。\nゲージの設定 Guage ToolBoxから好きなゲージを動画の部分にドラッグアンドドロップして追加します。\nこれをダブルクリックすると詳細な設定が可能ですが、基本的にはColumn Mappingでカテゴリーとデータの種類を適切に設定していれば設定を変更する必要はありません。\n同期 Synchronizationを開いて動画とデータの同期を行います。この操作に関しては公式のチュートリアル動画の0:45以降が分かりやすいです。\n書き出し File -\u0026gt; Create Videoから完成した動画を書き出せます。\n作成例    ハイブリッドロケットの打ち上げの動画をDashWareを使って編集しました。この詳細は別の記事に書きました。\n","description":"","id":9,"section":"blog","tags":["ロケット","鳥人間","ドローン","電子工作"],"title":"【DashWare】自作ロガーのデータを動画にオーバーレイ","uri":"https://771-8bit.com/blog/dashware/"},{"content":"第20回伊豆大島共同打上実験に参加し、自作ロケットを打ち上げました。\n伊豆大島共同打上実験は、全国の大学生によるハイブリッドロケットの打上実験です。私はCOREのメンバーとして参加しました。COREはハイブリッドロケットの製作・打上げを行う関東圏のインカレです。打ち上げたロケットCANVASは新入生が中心となって製作を行い、私は電装部分を担当しました。\n   打ち上げの様子とロケットのノーズに搭載したカメラの映像、取得したデータをまとめました(DashWareを使用)。\nロケットの詳細は報告書として共同打上実験のHPに公開しています。以下に公開する事柄はこの報告書に全て記述されています。\nこのミッションでは新入生教育を背景として、基礎的なロケットを作ることを目標としました。電装系としては、頂点で開放機構を動作させることとセンサーとカメラのデータを回収することが目標でした。機能としてはシンプルなため一つのマイコンで制御可能ですが、確実に動作する電装を作り、その開発体制をこれから維持できる基盤を作るため、CAN通信を採用したのが今回の電装の特徴です。CAN通信の具体的なメリットは報告書にまとめました。特に、COREはインカレであるためCANでモジュールを分割することにより開発を分担しやすくなりました。CANを使用した以外にも、通信の途絶やモジュールの故障、アップリンクやプログラム書き込みでの操作ミスなど様々なリスクを考慮し、動作テストを繰り返して信頼性を高めました。\n打ち上げ当日は問題なく電装は動作し、パラシュートの開傘とデータの回収に成功しました。取得したデータの詳細は報告書にあります。\n   打ち上げ時の地上局の録画\nハイブリッドロケットの電装は機能としてはシンプルで高度な制御は行っていませんが、本番一回の打ち上げで確実に動作させるという点に難しさと楽しさがあると思っています。打ち上げと全く同じ状況を地上で再現することはできないため、様々なことを考えて設計・製作をする必要があります。打ち上げ時はとても緊張し、パラシュートが開いたときは手が震えるほど嬉しかったです。これからもこの分野でのものづくりを続けていきます。\n","description":"","id":10,"section":"blog","tags":["ロケット"],"title":"第20回伊豆大島共同打上実験","uri":"https://771-8bit.com/blog/izuoshimarocket-20/"},{"content":"pyserialとPySimpleGUIを使ってシリアルモニタを作りました。ArduinoをGUIで操作できます。\n使用したライブラリ pyserial pyserialを使うとPythonでシリアル通信を行えます。これだけでArduinoとの通信は可能ですが、今回はGUIにするためPySimpleGUIも使用しました。\nPySimpleGUI PySimpleGUIはPythonでGUIを扱うためのライブラリで、tkinter・Qt・WxPython・Remiといった既存のライブラリをまとめて簡単にコードを書けるようにしたものです。学習コストをかけずサクッとGUIアプリを作りたい場合は、簡単に書けるPythonとこのライブラリの組み合わせが最適だと思います。\nシリアルモニタ このようなシリアルモニタを自作できます。\nコード全体をのせます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68  import PySimpleGUI as sg import serial import serial.tools.list_ports import time import threading coms = serial.tools.list_ports.comports() comlist = [] for com in coms: comlist.append(str(com.device)) sg.theme(\u0026#39;DarkBlack\u0026#39;) layout = [[sg.Text(\u0026#39;COMポート\u0026#39;),sg.Combo(comlist, size=(10, 1),key=\u0026#39;selectCOM\u0026#39;, enable_events=True),sg.Text(\u0026#39;\u0026#39;,size=(16, 1),key=\u0026#39;com_state\u0026#39;),sg.InputText(\u0026#39;\u0026#39;, size=(18, 1), key=\u0026#39;uplink\u0026#39;),sg.Button(\u0026#39;送信\u0026#39;, key=\u0026#39;send\u0026#39;)], [sg.Output(size=(97,10))] ] window = sg.Window(\u0026#39;Serial Monitor\u0026#39;, layout,enable_close_attempted_event=True) ser = serial.Serial() ser.baudrate = 115200 ser.timeout = 0.1 def GUIloop(): while True: event, values = window.read() if event == \u0026#34;-WINDOW CLOSE ATTEMPTED-\u0026#34;: if(sg.popup_ok_cancel(\u0026#34;終了しますか？\u0026#34;)==\u0026#39;OK\u0026#39;): ser.close() window.close() break if event == sg.WIN_CLOSED: #ウィンドウのXボタンを押したときの処理 break if event == \u0026#39;selectCOM\u0026#39;: if ser.is_open: ser.close() ser.port = values[\u0026#39;selectCOM\u0026#39;] ser.open() if event == \u0026#39;send\u0026#39;: try: ser.write(values[\u0026#39;uplink\u0026#39;].encode()) window[\u0026#39;uplink\u0026#39;].update(\u0026#39;\u0026#39;) except: print(\u0026#39;err\u0026#39;) def COMloop(): while True: if ser.is_open: window[\u0026#39;com_state\u0026#39;].update(\u0026#39;connected\u0026#39;) try: text=ser.readline().decode(\u0026#39;UTF-8\u0026#39;).rstrip() print(text) except: time.sleep(0.1) else: window[\u0026#39;com_state\u0026#39;].update(\u0026#39;disconnected\u0026#39;) time.sleep(0.1) thread_GUI = threading.Thread(target=GUIloop) thread_COM = threading.Thread(target=COMloop, daemon=True) thread_GUI.start() time.sleep(0.5) thread_COM.start() time.sleep(1)   PySimpleGUI PySimpleGUIについては以下の記事を参考にしました。\n Pythonでも簡単にGUIは作れる  ドロップダウンリストを利用したCOMポートの選択 pyserialの機能で使用可能なCOMポートをlistで受け取れます。この要素を文字列に変換してPySimpleGUIのコンボボックスに追加しています。valuesを通して選択された文字列が受け取れるので、これをもとにCOMポートを開くことができます。\n PySimpleGUIを使ったドロップダウンリストの作成方法について PysimpleGui コンボボックスを動的に変化させる方法  pyserialでの文字列の送受信 文字列ではなくバイナリデータとしてシリアル通信を行うので、送信時は'文字列'.encode()とする必要があります。逆に受信時はser.readline().decode('UTF-8')とします。このプログラムではさらにrstrip()を使いました。\n 【TIPS】Pythonでシリアル通信するpyserialの使い方と動作確認方法[Windows版] Pythonで文字列の前にBをつける  GUI用スレッドとCOMポート用スレッドの処理 GUI用ループとCOMポート用ループを別で走らせるためにデーモンを使用しました。\n Pythonのthreading使ったらプログラムが止まらなかったパターンがある 【Python】スレッドのデーモン化について  応用 これを応用して少し込み入ったGUIも実装できます。これはハイブリッドロケットの地上局のソフトウェアです。この詳細は別の記事に書きました。\n  ","description":"","id":11,"section":"blog","tags":["電子工作","Python"],"title":"pyserialとPySimpleGUIでシリアルモニタ","uri":"https://771-8bit.com/blog/pyserial/"},{"content":"【Lチカの先へ】データシートを読んでセンサーをArduinoで使えるようになる最短ルートとしてelchikaに投稿したものの最新版です。\nはじめに センサーの専用ライブラリに頼らず「データシートを読んでセンサーをArduinoで使える」人が、初心者を同じレベルまで電子工作ができるように教育することを想定しています。Lチカまではたくさん資料があるけど、そこから先はどうすれば…と思って自分のメモとして書きました。そのため、初心者の人がこれを読んで自力で学ぶには不親切かもしれません。目標のセンサーは秋月のセンサーモジュールぐらいのつもりです。\n質の高い書籍や資料は存在しますが、何か一つの資料だけで完璧に習得できるということはまずなく、完璧な入門書を使うとその先が分からなくなるということもあるので、様々な資料を使いながら電子工作に慣れていくというのが良いかなと思います。その主軸として、特に以下のことを考えてこのプランを作りました。\n 本やネットの内容をコピーするのではなく、自分でものを作れること 問題を解決する能力をつけること、問題を回避する能力をつけること 自分でさらに知識をつけることができる基盤を作ること  やること やることを順番にまとめて、学べることを箇条書きにしました。マイコンはSeeeduino XIAOを想定しています。\n魚ではなく魚の釣り方を教えるイメージで以下の通りにすれば、電子工作がある程度できるようになると思います。\nチカチカ チカチカ(非安定マルチバイブレータ)を回路図を読んで作ります。できればコンデンサや抵抗を変えて周期の変化を確かめたり、波形をオシロで見せつつ仕組みの解説をしたいところです。\n 回路図の読み方 ブレッドボードの使い方 電子回路  LEDと保護抵抗 コンデンサ(RC回路) トランジスタのスイッチング   はんだ付け  Lチカ まずはLチカでArduinoの基本的な使い方を学びます。プログラミングも初心者の場合はここからゆっくりプログラミングについて教えます。\n Arduino IDEの使い方 デジタル出力  スイッチでLEDのON/OFF スイッチを押したらLEDが光るようにします。\n デジタル入力 プルアップ・プルダウン  PCとシリアル通信 スイッチが押されたらPCにシリアル通信をするプログラムを書きます。printデバッグ用に早めにこれをやると良いかなと思います。押されている間ずっと通信するのではなく押された瞬間に通信するプログラムにします。\n PCとのシリアル通信 スイッチのチャタリング  可変抵抗でLEDの明るさ調整 可変抵抗で分圧回路を作り、それをADCで読み取ってLEDの明るさを調整します。LEDの降下電圧を確認するため、DAC→PWMの順で実践します。PWMの出力波形をオシロで見せられると良いです。\n 分圧 ADC DAC PWM (analogWrite)  Seeeduino XIAOのADC(analogRead)はすべてのピンで10bit、analogWriteは0番ピンのみDACでデフォルトは10bit、それ以外のピンはPWMでデューティー比は8bitで設定できます。詳細はこちらの記事を参照してください。\n圧電ブザー LEDだけだとつまらないので音を出してみます。まずは単純にONOFFを繰り返すプログラムを書いてPWMについて理解したあと、tone関数を使ってみると良いと思います。圧電ブザーはミニゲームでも活用できます。\n PWM  サーボモータ PWMを素直に書いたあと、Servoライブラリを導入すればライブラリについても学べます。\n PWM ライブラリ  スイッチでLEDの点灯/点滅 複数のセンサーや周辺機器を制御することを想定して、あるLEDを一定周期で点滅させつつ、別のLEDのON/OFFをスイッチで切り替えられるようにします。まずはタイマや割り込みを使わないでプログラムを組んで、delay中はスイッチの判定ができないことを確認します。タイマと割り込みについて解説した後、以下のような方法で実装します。\n delayで点滅し、割り込みでスイッチを監視する方法 delayで点滅し、ピン変化割込みでスイッチを監視する方法 タイマ割り込みで点滅し、loopでスイッチを監視する方法 時間関数を使って点滅し、loopでスイッチを監視する方法  Seeeduino XIAOのタイマ割り込みは、Arduino IDEのスケッチ例を参考にしてください。ピン変化割り込みでは、ピンの番号に注意してください。\nこのように割り込みには様々な使い方がありますが、以下の方針で使う方法を選ぶと良いと思います。\n 優先度の高いタスクを割り込みで実行する 割り込みルーチンの実行時間を短くする プログラム全体でdelay関数を使わないでいいようにする  学ぶのは以下の内容です。\n タイマ 割り込み  LEDとスイッチでミニゲーム 数個のLEDとスイッチのセットで作れるミニゲームを実装します。光ったLEDに当たるスイッチを制限時間内に押すモグラ叩きゲームがちょうど良いと思います。これに圧電ブザーを加えてみても良いです。ここでじっくり自力で仕様を考えてプログラムを組んでデバッグすることが重要です。\n 変数や制御文などの\u0026quot;プログラム\u0026quot; デバッグ  部品を壊す 予期しないタイミングで部品を壊してしまうよりは、一度簡単な部品を壊す経験をしてしまう方が安全だと思います。その経験としてLEDを保護抵抗無しで電源(保護回路あり)に直接つなげます。電解コンデンサの逆接は危険ですが、LEDの破壊程度であれば何かカバーを被せれば十分安全に試せると思います。\n 絶対最大定格 故障モード\nLEDの破壊の様子はYouTube等で見ることができます。実験の前に動画を見て危険だと思われる場合は、LEDの破壊の代わりに適切な抵抗を挟んだうえでヒューズを溶断してみるのをおすすめします。   センサ(ADC) いきなりシリアル通信は難しいので、ADCで読めるセンサを使います。\n データシートの読み方  センサ(シリアル通信) シリアル通信(ArduinoのSerial(UART)に限らず)で読めるセンサを使います。Arduinoのコードをなんとなく追うのではなく、まずシリアル通信のプロトコルについてしっかり理解して、どんな信号がやりとりされているのかを把握するべきです。その後Arduinoの関数の役割を理解すれば詰まることなく進められるはずです。\n シリアル通信  使う部品・サンプルコード  サンプルコードはGitHubで公開しています。Seeeduino XIAOを使うことを想定しています。\n必要な知識・スキル 知識そのものを自分で書くと時間が足りないので、いい感じの資料をまとめました。もちろん全部覚えてもらうことはないです。\nほぼ全ての基礎\n電子工作のための電子回路基礎\nArduinoをはじめよう 第3版\n組込みエンジニアの教科書\n実際の製作  はんだ付け\nまずはこれ(村田製作所)\n細かいこと1(HAKKO)\n細かいこと2(GodHanda) ブレッドボードの使い方  プログラミング  C++入門 AtCoder Programming Guide for beginners 苦しんで覚えるC言語  Arduino・マイコン 公式Arduinoリファレンス\ngarretlab\nNOBのArduino日記！\nspiceman\n そもそもコンピュータ・マイコンとは\nDigikey(動画)\nそもそも「マイコン」って何？ マイコンやセンサーを動かすための外部の回路  電源(レギュレータ・コンデンサなど) プルアップ・プルダウン   マイコンの機能  入出力 ADC DAC タイマ PWM 割り込み シリアル通信  UART SPI I2C仕様書  I2C概要 ArduinoでI2C        一般の回路・部品  Electrical Information\nマイコン以外の電子部品、電気・電子回路 秋月のカタログ\n使える武器が増えるのでどんなカテゴリがあるか知っておいた方が良いです。 リチウム二次電池の扱い  Lipoの基礎 電池回収@ビックカメラ：塩水にはつけずに回収BOXへ LiPoバッグ    単純な技術以外のスキル 問題解決・問題回避 もの作りで一番必要なのは失敗が許容される状況だと思います。無計画でいいというわけではなく、大きな失敗を避けること、失敗してもそれを解決できることが重要です。(チームの場合は人間関係がゴタゴタしないことも重要)\n 問題回避\n最初から完璧を目指して全部作って最後に動作確認をすると、問題の原因特定が困難です。ある程度の機能を作ったら動作テストを心がけ、細かい失敗を前提とした製作をします。Done is better than perfect. 問題解決\n経験があれば問題から直接原因を推測したり、よく観察してすぐに原因を特定できたりしますが、慣れないうちは以下の手順を丁寧に行うことをおすすめします。  分割する\n動かない理由を特定するには、当然ですが動く理由をしっかり理解していることが必要です。そのうえで、仕組みを小さな構成要素に切り分けて一つずつ調べていきます。仕組みの最初から最後まで順番に調べていくのは手間が手間がかかり、どの程度細かく分割すればいいか分からなくなるので、二分探索の要領で進めていくと良いです。 チェックする\n切り分けた各部分について、以下の方法で問題ないか調べていきます。\nA 想定通り動作しているか調べる\nB 条件を変えて調べてみる(対照実験) 分からないことはググる/人に聞く\n質問の仕方     LEDが光らないなら、まずマイコン側と回路側で分割します。テスターを使ってマイコンから正しい電圧が出ていることが分かれば(A)、問題は回路側にあることになります。LEDが故障しているなら、LEDを交換する(B)ことで原因にたどり着くはずです。これは単純な例ですが、複雑な問題も同じように解決できます。\n データシートの読み方 読んで慣れるしかない？\nなにかアドバイスあればコメントください。\n公式ドキュメントの扱い方 公式サイトと他のサイトはそれぞれどちらも長所短所があるので、使い分けを意識します。\n 他のサイトを見て全体像を把握する 公式サイトにたどり着く まずサイトの構成を知る 必要な所を読む   公式ドキュメント(公式リファレンスとも)\nその技術や製品そのものについて書いてある\nそれの仕様,使い方をちゃんと学べる 信頼性が最も高い(外部サイトは情報が古いかも) 他のサイト  それを外部の視点から書いたもの\n他の技術や製品と比べて書いてある 外から見るので全体像が掴める 公式に書いてないことを書いたもの\nバグは外部サイトに書いてある事が多い 公式の記述を要約しているもの\n分かりやすいけど結局公式のトップページが神    おすすめの工具・測定器 おすすめの工具・測定器を布教して終わりにします。\n はんだごて FX600 こて台 633-01 こて先 2.4D型 T18-D24 ハンダ吸取器 SS-02   はんだ吸煙器 オシロスコープ HDS2102S ","description":"","id":12,"section":"blog","tags":["電子工作","Arduino"],"title":"電子工作入門","uri":"https://771-8bit.com/blog/for-beginners/"},{"content":"「CPUの創りかた」のTD4を製作しました。製作時点で購入できた部品についてまとめてあります。\n作ったもの ロジックICで自作する4bit CPUを「CPUの創りかた」をもとに作りました。集積度が高いのが好きなので、秋月電子のユニバーサル基板のBタイプに収めてあります。実際に作ってデバッグしていくとCPU内のデータの流れがよく理解できました\n デバッグしやすいように動作確認がとれる部分ごとに製作していきました。\n ROMを作って単体で動作確認 クロック回路を作って単体で動作確認 命令デコーダを作ってROMとクロック回路をつなげて動作確認 残りをすべて実装して完成  ROM TD4のオリジナルの回路に加えて、実行中の命令を示すLEDをつけました。ダイオードはカソードコモンのダイオードアレイを使っています。使用したDIPスイッチは幅が狭く実装密度を上げたい場合はおすすめです。\nTD4のROM\n(74HC540買い忘れ) pic.twitter.com/1vrP5s8ATu\n\u0026mdash; 8bitマイコン (@771_8bit) September 19, 2021 普通のDIPパッケージの部品を使うときもハーフピッチ基板を使うとピンの隙間に配線を通せて便利です。\nクロック回路 ICの電源ピンからクリップで電源を供給して動作確認しました。\nTD4のクロック回路(と自作オシロ) pic.twitter.com/CvYocwevLy\n\u0026mdash; 8bitマイコン (@771_8bit) September 20, 2021 命令デコーダ 同じ種類のゲートを入れ替えて配線が簡単になっています。\n動作テスト pic.twitter.com/JgnaEWmPwb\n\u0026mdash; 8bitマイコン (@771_8bit) September 20, 2021 CPU中心部 74HC161はSOPパッケージのものしか入手できなかったのですが、ICの裏に配線を通したかったので変換基板を使って表側に実装しました。レジスタAとレジスタBの値を青色LEDで示せるようになっています。出力レジスタは出力のLEDで、プログラムカウンタはROMの緑色LEDで確認できます。\nTD4完成！ pic.twitter.com/Sthn8hqvNx\n\u0026mdash; 8bitマイコン (@771_8bit) September 23, 2021  主要部品購入先 74HC154は入手できなかったため、こちらの記事を参考に74HC138で置き換えました。3-to-8デコーダを2つ使って4-to-16デコーダを作ります。\n   オリジナル  用途 型番 購入先     74HC74 キャリーフラグ TC74HC74AP (フリッププロップ) 秋月   74HC161 レジスタ・プログラムカウンタ TC74HC161AF (4ビットカウンタ) 秋月   74HC153 データセレクタ TC74HC153AP (4chマルチプレクサ) 秋月 マルツ   74HC32 命令デコーダ TC74HC32AP (OR) 秋月   74HC283 ALU CD74HC283E (加算器) 千石   74HC10 命令デコーダ TC74HC10AP (NAND) 千石   74HC154 アドレスセレクタ TC74HC138AP (3-to-8ラインデコーダ) 秋月   74HC540 アドレス出力 TC74HC540AP (インバータ) 千石   74HC14 クロック回路 TC74HC14AP (シュミットトリガ) 秋月   DIPスイッチ ROM KSD82 (DIPスイッチ 8P) 秋月   ダイオード ROM CE880 (ダイオードアレイ) 秋月    詰まったところ カウンタICの使い方 TD4ではカウンタICのカウントアップ機能を殺してレジスタを作ります。最初はこのあたりをよく理解せずに配線を始めていて、74HC161のENTピンとENPピンをLに落としていませんでした。このため電源を入れるとレジスタAとBが勝手にカウントアップしました。加算回路を調べても正常だったので本を読み直すとICのカウントアップ機能が原因だったことが分かりました。\nプルアップ配線ミス スイッチのプルアップ抵抗を電源側ではなくスイッチ側につけてしまいました。これは実装した翌日に基板を見て気づきました。製作物も製作者も一晩寝かすとデバッグが進みますよね。\nはんだ付け接触不良 レジスタAが常にロードされるような挙動から、レジスタAの74HC161の接触不良に気づきました。\nセキュキャンのLT会資料 セキュリティ・キャンプ全国大会2022のLT会でTD4について発表しました。\nロジックICから4bit CPUを作る by @771_8bit","description":"","id":13,"section":"blog","tags":["電子工作"],"title":"TD4作ってみた","uri":"https://771-8bit.com/blog/td4/"},{"content":"秋月電子で取り扱いの始まったCO2センサーMH-Z19CをArduino Nano Everyで使ってみました。\nこの記事はQiitaに投稿した記事を再掲したものです。\nMH-Z19Cについて MH-Z19CはNDIR方式のCO2センサで、電源電圧は5.0±0.1V、データの出力はPWMかUART(3.3Vで5.0Vにも対応)です。測定できる範囲はPWMを使うと公称値は400~2000ppm(実測では400~5000ppm)、UARTでは400~5000ppmです(CO2濃度は大気中で約400ppm、室内で約1000ppm、呼気で約30000ppmが目安)。ピンヘッダは2.54mmピッチですが、ピンヘッダとピンヘッダとの間隔が合わずユニバーサル基板に挿すのは難しいので注意してください。\nここでは5V駆動のArduino Nano Everyを使い、PWMとUART両方のデータを読んでみます。\nハードウェア 使ったもの  MH-Z19C Arduino Nano Every 5Ｖ出力昇圧DCDCコンバーターとコンデンサー  Arduinoの5V OUTピンの電圧を測ると4.72-4.78Vでセンサーの電圧の範囲から外れていたので、一応4.9~5.1V出力(実測4.98V)のDCDCコンバーターと100μFのコンデンサーをつけました。\n接続    MH-Z19C      Vin DCDCコンバーター ← Arduino 3.3V   GND Arduino GND   PWM Arduino A7   Hd Arduino A6   Rx Arduino TX1   Tx Arduino RX1    ソフトウェア MH-Z19Cの仕様 データシートはここで読めます。以下の画像はデータシートのものです。\nUART UARTでCO2濃度の読み取りと自動キャリブレーションの設定ができます。\nPWM  データシートでは上のようになっていますが、Cppm=5*(パルス幅[ms]-1.2)とするとUARTと同じデータが読み込めました。Arduino Nano EveryのpulseInかセンサーのPWM出力のどちらかが原因だと思います。\n手動キャリブレーションはHdピンを使うのでPWMでもできますが、自動キャリブレーションの設定はPWMだけではできません。デフォルトでは24時間ごとに自動キャリブレーションが行われます。(キャリブレーション時にどんな濃度でもそれを400ppmと認識するのではなく、24時間経ったあたりで400ppmに近い状態と判断するとキャリブレーションを行うようです)\nプログラム 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  uint16_t uartco2; unsigned long pwmco2; bool reset = false; byte ReadCO2[9] = {0xFF, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79}; byte SelfCalOn[9] = {0xFF, 0x01, 0x79, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xE6}; byte SelfCalOff[9] = {0xFF, 0x01, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86}; byte retval[9]; void setup() { pinMode(A7, INPUT); pinMode(A6, OUTPUT); Serial.begin(9600); Serial.print(\u0026#34;400ppm\u0026#34;); Serial.print(\u0026#34;,\u0026#34;); Serial.print(\u0026#34;UART\u0026#34;); Serial.print(\u0026#34;,\u0026#34;); Serial.println(\u0026#34;PWM\u0026#34;); delay(2000); Serial1.begin(9600); Serial1.write(SelfCalOn,sizeof SelfCalOn); } void loop() { //PWMでデータ取得  pwmco2=pulseIn(A7,HIGH,2000000); //UARTでデータ取得  Serial1.write(ReadCO2,sizeof ReadCO2); Serial1.readBytes((char *)retval, sizeof retval); uartco2 = retval[2]*256 + retval[3]; //PCに送信  Serial.print(2*(202000-2000)/1000); Serial.print(\u0026#34;,\u0026#34;); Serial.print(uartco2); Serial.print(\u0026#34;,\u0026#34;); Serial.println(5*(pwmco2-1200)/1000); delay(100); //起動20分後手動キャリブレーション  if(millis()\u0026gt;1200000 \u0026amp;\u0026amp; !reset){ digitalWrite(A6,LOW); delay(8000); digitalWrite(A6,HIGH); reset=true; } }   測定結果 Arduino IDEのシリアルプロッタを使って可視化しました。縦軸がCO2濃度[ppm],横軸が起動からの時間(1が100ms)です。\n  換気したとき\n  人が部屋に入ってきたとき\n横軸1600ぐらいで部屋に入っています。\n  直接息をふきかけたとき\n息をふきかけた直後に値が上昇しました。\n ","description":"","id":14,"section":"blog","tags":["電子工作","Arduino"],"title":"秋月で買えるCO2センサーを使う(MH-Z19C)","uri":"https://771-8bit.com/blog/mh-z19c/"},{"content":"第15回全日本学生室内飛行ロボットコンテストのマルチコプター部門に出場しました。\n 飛行ロボコンのマルチコプター部門では、自作したマルチコプターを飛行させ各ミッションを行います。私は高校の航空宇宙同好会として参加し、機体製作を担当しました。このチームでは、カメラで正しい箱を探して物資を投下する「高所物資運搬」、機体重量350gに対し100g程度の物資を運ぶ「大型物資運搬」、決められたコースを飛行する「8の字飛行」の3つのミッションを行いました。\n 機体 予選 決勝  マルチコプター部門には11チームが出場し、予選は3位タイで通過、決勝は4位となりました。大学・高専が中心の大会で普通科高校としては初出場ということもありましたが、あまり良い結果を残せませんでした。会場の通信環境やパイロットからの視点が想定より厳しかったこと、十分な操縦練習時間がとれなかったこと、飛行時間を優先した部品構成にしたため衝突に弱い構造になってしまったことなどが主な原因です。このため予選では8の字飛行に時間がかかり途中でミッションを諦めて帰還し、決勝では大型物資を正しい場所に投下できず、8の字飛行の途中でポールに衝突し棄権という結果になりました。\nそれでも予選ではマニュアル通りの正しい判断で時間内の帰還には成功して決勝に進め、決勝でもメインミッションである高所物資運搬は達成できました。様々反省点はありますが、ロボコンの本番の空気を味わうことができたり、ただものを作るだけではなく本番で運用する難しさが分かったり、良い経験になりました。\n","description":"","id":15,"section":"blog","tags":["ドローン"],"title":"第15回全日本学生室内飛行ロボットコンテスト","uri":"https://771-8bit.com/blog/indoor-flight-15/"}]